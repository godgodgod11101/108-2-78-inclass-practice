vectorExample[c(3, 1, 2)]    # 產生重新排列的效果
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = F, eval=T)
# windows檔名不要有"-"號
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選？
length(vectorExample)
# class(vectorExample)
# typeof(vectorExample)
vectorExample[[1]]
listExample <-
list(
student="小明",
semester=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選？
length(listExample)
listExample[[1]]
listExample[[2]]
listExample[[1]]
listExample[[2]]
listExample[[1]]
listExample[[2]]
listExample[[2]]
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
View(tainanSportsMap)
# 有什麼名子可以選？
names(listExample)
# 查看原始資料結構（display the structure）
str(listExample)
str(listExample$semester)
listExample$student
listExample$semester$`108-1`    # 特殊命名依然要用反頓點呼叫
listExample[["student"]]
listExample$student
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002", simplifyDataFrame = F) -> newTaipeiCityVaccine
str(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
View(tainanSportsMap)
View(newTaipeiCityVaccine)
newTaipeiCityVaccine$success
newTaipeiCityVaccine[[1]]
newTaipeiCityVaccine[["success"]]
# 只顯示一層
str(newTaipeiCityVaccine[[2]], max.level = 1)
View(newTaipeiCityVaccine)
vectorExample
vectorExample[c(1, 3)]
vectorExample[c(3, 1, 2)]    # 產生重新排列的效果
str(listExample, max.level = 1)
str(listExample[c(1, 2)], max.level = 1)
str(listExample[c(2, 1)], max.level = 1)
str(tainanSportsMap, max.level = 1)
str(tainanSportsMap[c(1, 35, 1006)], max.level = 1)
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("student", "semester")]
listExample[c("semester", "student")]
listExample[c("student", "semester")]
listExample[["student"]]
listExample[c("student")]    # 不要用
View(listExample)
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
str(taipeiNightMarkets, max.level = 1)
taipeiNightMarkets[c("寧夏觀光夜市", "饒河街觀光夜市")]
vectorExample
vectorExample[c(T,T,F)]    # 要，要，不要
vectorExample[c(TRUE, TRUE, FALSE)]
# 不要用
str(listExample[c(T, F)])
str(listExample[c("student")])
str(taipeiNightMarkets, max.level = 1)
names(taipeiNightMarkets)
library(dplyr)
taipeiNightMarkets[c(T, F, F, F, T, F, F, F, F, T, F, F, F, T)] %>%
str(max.level = 1)
selectedMarkets <- rep(F, 14)    # repeat函式
print(selectedMarkets)
selectedMarkets[c(1, 5, 10, 14)] <- TRUE    # 取代
print(selectedMarkets)
taipeiNightMarkets[selectedMarkets] %>%
str(max.level = 1)
str(listExample, max.level = 3)
get1 <- listExample[["semester"]]
str(get1, max.level = 1)
get2 <- listExample[c("semester")]
str(get2, max.level = 1)
str(get2, max.level = 2)
str(get1, max.level = 1)
str(get2, max.level = 1)
# [[]]：拿出某個物件值。
# listExample[["semester"]]將listExample裡的“semester”物件值拿出來
# []: 留下某個物件值。
# listExample[c("semester")]「只留下」listExample裡的“semester”物件值
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
# 用 ; 斷行
select1 <- numVector[c(1,4)]
select1
select1 <- numVector[c(1,4)]; select1
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
majors <- c("經濟學系", "經濟學系", "社會學系", "社工系", "經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F", "F", "M", "F", "M")
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = F, eval=T)
# windows檔名不要有"-"號
listExample <-
list(
student="小明",
semester=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = F, eval=T)
# windows檔名不要有"-"號
listExample <-
list(
student="小明",
semester=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
get1 <- listExample[["semester"]]
get2 <- listExample[c("semester")]
str(listExample)
get1 <- listExample[["semester"]]
get2 <- listExample["semester"]
get1 <- listExample[["semester"]]
get2 <- listExample["semester"]
# [[]]：拿出某個物件值。
# listExample[["semester"]]將listExample裡的“semester”物件值拿出來
# []: 留下某個物件值。
# listExample["semester"]「只留下」listExample裡的“semester”物件值
View(get2)
View(get1)
View(get2)
get1 <- listExample[["semester"]]    # 拿出來
# 同
listExample$semester
get2 <- listExample["semester"]    # 只留下
# [[]]：拿出某個物件值。
# listExample[["semester"]]將listExample裡的“semester”物件值拿出來
# []：留下某個物件值。
# listExample["semester"]「只留下」listExample裡的“semester”物件值
View(get1)
get1$`108-1`[[1]]$teacher
View(get2)
# 請分別由get1、get2取出108-1學期個體經濟學教師姓名
get1$`108-1`[[1]]$teacher
get2[[1]]$`108-1`[[1]]$teacher
str(get1)
str(get1)
str(get2)
get2$semester$`108-1`[[1]]$teacher
# 請分別由get1、get2取出108-1學期個體經濟學教師姓名
get1$`108-1`[[1]]$teacher
get2$semester$`108-1`[[1]]$teacher
str(get2)
str(get2)
get2$semester -> get2Layer1
str(get2Layer1)
str(get2)
get2$semester -> get2Layer1
str(get2Layer1)
get2Layer1$`108-1` -> get2Layer2
str(get2Layer2)
get2Layer2[[1]] -> get2Layer3
str(get2Layer3)
get2Layer3[[2]] -> get2Layer4
str(get2Layer4)
get2Layer3[[2]] -> get2Layer4
get2Layer4
str(get2)
get2$semester -> get2Layer1
str(get2Layer1)
get2Layer1$`108-1` -> get2Layer2
str(get2Layer2)
get2Layer2[[1]] -> get2Layer3
str(get2Layer3)
get2Layer3[[2]] -> get2Layer4
get2Layer4
vector1 <- c(a=1, b=3, c=8)
vector1[["a"]]
vector1[c("a", "c")]
vector1
vector1$a
vector1 <- c(a=1, b=3, c=8)
vector1[["a"]]
vector1[c("a", "c")]
vector1$a    # $只適用於list
list1 <- list(a=1, b=3, c=8)
list1[["a"]]
vector1 <- c(a=1, b=3, c=8)
vector1[["a"]]
vector1[c("a", "c")]
# vector1$a    # $只適用於list
list1 <- list(a=1, b=3, c=8)
list1[["a"]]
list1[c("a", "c")]
list1$a
vector1[["a"]]
vector1[c("a", "c")]
list1[["a"]]
list1[c("a", "c")]
list1$a
View(list1)
today <- list(
list("台北市", c(highest_temp = 25), c(lowest_temp = 18)),
list("新北市", c(highest_temp = 24), c(lowest_temp = 15))
)
tomorrow <- list(
list("台北市", c(highest_temp = 25), c(lowest_temp = 18)),
list("新北市", c(highest_temp = 24), c(lowest_temp = 15))
)
weather <- list(today,tomorrow)
print(weather)
today <- list(
list("台北市", c(highest_temp = 25), c(lowest_temp = 18)),
list("新北市", c(highest_temp = 24), c(lowest_temp = 15))
)
str(today)
today[[1]][[2]]
today1 <- list(
list("台北市", highest_temp = 25, lowest_temp = 18),
list("新北市", highest_temp = 24, lowest_temp = 15)
)
str(today)
today1 <- list(
list("台北市", highest_temp = 25, lowest_temp = 18),
list("新北市", highest_temp = 24, lowest_temp = 15)
)
str(today1)
today1 <- list(
list(city = "台北市", highest_temp = 25, lowest_temp = 18),
list(city = "新北市", highest_temp = 24, lowest_temp = 15)
)
str(today1)
today1[[1]]$highest_temp
# 老師作法
today2 <- list(
list(
city = "台北市",
highest_temp = c(highest_temp = 25),
lowest_temp = c(lowest_temp = 18)
),
list(
city = "新北市",
highest_temp = c(highest_temp = 24),
lowest_temp = c(lowest_temp = 15)
)
)
today2[[1]]$highest_temp
a <- c("1", "b", "TRUE")
a
a[[2]] <- "c"    # 元素存在，替換
a
a[[4]] <- "7"    # 元素不存在，增加
a
a[c(5,6)] <- c("J", "K")
a
a[[7]] <- "Johnson"
a
a <- c(a, "Mary")
a
a <- c(a, "Mary")
a
a <- c(a, "Mary")
a
# 元素提取[.],[[.]],$.也可用來進行元素「值」的修改與新增
# obj[.] <- value
# obj[[.]] <- value
# obj$. <- value
a <- c("1", "b", "TRUE")
a
a[[2]] <- "c"    # 元素存在，替換
a
a[[4]] <- "7"    # 元素不存在，增加
a
a[c(5,6)] <- c("J", "K")
a
a[[7]] <- "Johnson"
a
a <- c(a, "Mary")
a
a <- c(a, "Mary")
a
library(lubridate)
list1 <-
list(
list(
name = "Jack",
birthday = ymd("1998-03-21"),
status = c(height=177, weight=80)
)
)
str(list1)
# 更改日期
list1[[1]]$birthday <- ymd("19930608")
str(list1)
# 新增資料
list1[[2]] <-
list(
name = "Mary",
birthday = ymd("19930408")
)
str(list1)
str(list1)
list1[[1]][["age"]] <- 25
list1
str(list1)
list[[2]]["age"]
list[[2]]["name"]
list[[2]]
list[[1]]
list1[[2]]
list1[[2]]["name"]
list1[[2]]["age"] <- 25
str(list1)
View(list1)
list1[[2]]["age"] <- list(23)
str(list1)
# 由於[.]會保留母層結構，所以 <- 右側要使用和母層相同的型態設定：
#   母層若為list，則需用list(...)方式增加。
#   母層若為atomic vector，則用c(...)方式增加。
str(list1)
list1[[1]][["age"]] <- 25
list1[[2]]["age"] <- list(23)
str(list1)
# 改變「一個」元素時，使用[[ ]]比較不會錯。
library(lubridate)
list1 <-
list(
list(
name = "Jack",
birthday = ymd("1998-03-21"),
status = c(height=177, weight=80)
)
)
str(list1)
# 更改日期
list1[[1]]$birthday <- ymd("19930608")
str(list1)
# 新增資料
list1[[2]] <-
list(
name = "Mary",
birthday = ymd("19930408")
)
str(list1)
# 由於[.]會保留母層結構，所以 <- 右側要使用和母層相同的型態設定：
#   母層若為list，則需用list(...)方式增加。
#   母層若為atomic vector，則用c(...)方式增加。
str(list1)
list1[[1]][["age"]] <- 25
list1[[2]]["age"] <- list(23)
str(list1)
# 改變「一個」元素時，使用[[ ]]比較不會錯。
# 由於[.]會保留母層結構，所以 <- 右側要使用和母層相同的型態設定：
#   母層若為list，則需用list(...)方式增加。
#   母層若為atomic vector，則用c(...)方式增加。
str(list1)
list1[[1]][["age"]] <- 25
list1[[2]]["age"] <- list(23)
str(list1)
# 改變「一個」元素時，使用[[ ]]比較不會錯。
View(list1)
# 給Jack增加兩個元素
list1[[1]][c("bloodType", "registered")] <- list("AB", T)
str(list1)
a
# 元素提取[.],[[.]],$.也可用來進行元素「值」的修改與新增
# obj[.] <- value
# obj[[.]] <- value
# obj$. <- value
a <- c("1", "b", "TRUE")
a
a[[2]] <- "c"    # 元素存在，替換
a
a[[4]] <- "7"    # 元素不存在，增加
a
a[c(5,6)] <- c("J", "K")
a
# 增加一個 Johnson ，使用 [[.]] <- 。
a[[7]] <- "Johnson"
a
# 使用前一章的向量疊代（recursive vector concatenate）法，新增一個 Mary 。
a <- c(a, "Mary")
a
a
print(a)
a[-c(1, 3)]
a[-2]
a[c(-2)]
list1[[1]]
list1[[1]][[-"name"]]
list1[[1]][-"name"]
"name"
list1[[1]][-c("name")]
View(list1)
list1[[1]][["name"]]
list1[[1]][[-"name"]]
list1[[1]][c("name")]
list1[[1]][-c("name")]
print(a)
a[-c(1, 3)]
a[c(-2)]
str(list1)
library(lubridate)
list1 <-
list(
list(
name = "Jack",
birthday = ymd("1998-03-21"),
status = c(height=177, weight=80)
),
list(
name = "Mary",
birthday = ymd("1998-08-24"),
status = c(height=163, weight=45),
age = 21,
bloodType = "AB"
)
)
str(list1)
list1[[1]][-3]
# 刪除Jack的status
list1[[1]][-3] -> list1[[1]]
str(list1)
# 刪除Mary的status, blookType
list1[[2]][-c(3, 5)] <- list1[[2]]
str(list1)
# 刪除Mary的status, blookType
list1[[2]][-c(3, 5)] <- list1[[2]]
str(list1)
list1[[2]]
list1[[2]][-c(3)]
list1[[2]][-c(3, 5)]
# 刪除Mary的status, blookType
list1[[2]][-c(3, 5)] -> list1[[2]]
str(list1)
str(list1)
# list元素要刪除時也可以用 [.] <-NULL 、 [[.]] <- NULL
str(list1)
list1[[2]][c(1, 2)] <- NULL
str(list1)
str(list1)
jsonlite::fromJSON("https://api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits", simplifyDataFrame = F)
jsonlite::fromJSON("https://api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits", simplifyDataFrame = F) -> githubCommit
str(githubCommit)
str(githubCommit, max.level = 2)
githubCommit[[3]][["commit"]][["committer"]]
githubCommit[[3]][["commit"]][["committer"]][-c(2)]
# 刪掉email
githubCommit[[3]][["commit"]][["committer"]][-c(2)] ->
githubCommit[[3]][["commit"]][["committer"]]
githubCommit[[3]][["commit"]][["committer"]]
githubCommit[[1]][["commit"]][["committer"]]
githubCommit[[1]][["commit"]][["committer"]]$email <- NULL
githubCommit[[1]][["commit"]][["committer"]]
