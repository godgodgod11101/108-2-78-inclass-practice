(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
# fast function
askSillyWeatherFast <- function(locationInput){
if(!require(jsonlite)){
install.packages("jsonlite")
}
if(!require(glue)){
install.packages("glue")
}
if(!require(SOAR)){
install.packages("SOAR")
}
if(str_detect(locationInput, "^台")){
str_replace(
locationInput, "^台", "臺"
) ->
locationInput
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 將存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
# slow function
askSillyWeatherSlow <- function(locationInput){
if(!require(jsonlite)){
install.packages("jsonlite")
}
if(!require(glue)){
install.packages("glue")
}
if(!require(SOAR)){
install.packages("SOAR")
}
if(str_detect(locationInput, "^台")){
str_replace(
locationInput, "^台", "臺"
) ->
locationInput
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
askSillyWeatherSlow("台北市") %>%
system.time()
askSillyWeatherFast("台北市") %>%
system.time()
askSillyWeatherSlow("台北市") %>%
system.time()
askSillyWeatherFast("台北市") %>%
system.time()
rm(weather_next36hours)
rm(weather_next36hours)
rm(weather_next36hours)
gc()
rm(list = ls(all.names = T))
twDate <-  c("民國108年12月5日", "民國98年10月5日")
# 民國年月日存成date class
"(?<=民國)[:digit:]+(?=年)" -> pattern_year
str_extract(
twDate, pattern_year
) %>%
as.integer(.) %>%
{. + 1911} %>%
as.character(.)->
yearReplacement
twDate %>%
str_replace(
., pattern_year, replacement = yearReplacement
) %>%
ymd(.)
rm(list = ls(all.names = T))
gc()
gc(reset = T)
gc(reset = T)
load_cache()
load_cache()
clean_cache()
rm(weather_next36hours)
rm(weather_next36hours, envir = as.environment(.rs.CachedDataEnv))
.rs.restartR()
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
# fast function
askSillyWeatherFast <- function(locationInput){
if(!require(jsonlite)){
install.packages("jsonlite")
}
if(!require(glue)){
install.packages("glue")
}
if(!require(SOAR)){
install.packages("SOAR")
}
if(str_detect(locationInput, "^台")){
str_replace(
locationInput, "^台", "臺"
) ->
locationInput
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 將存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
# slow function
askSillyWeatherSlow <- function(locationInput){
if(!require(jsonlite)){
install.packages("jsonlite")
}
if(!require(glue)){
install.packages("glue")
}
if(!require(SOAR)){
install.packages("SOAR")
}
if(str_detect(locationInput, "^台")){
str_replace(
locationInput, "^台", "臺"
) ->
locationInput
}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
askSillyWeatherSlow("台北市") %>%
system.time()
askSillyWeatherFast("台北市") %>%
system.time()
askSillyWeatherSlow("台北市") %>%
system.time()
askSillyWeatherFast("台北市") %>%
system.time()
askSillyWeatherSlow("台北市") %>%
system.time()
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
search(weather_next36hours)
search("weather_next36hours")
weather_next36hours
install.packages("renv")
renv::refresh()
renv::refresh()
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
askSillyWeatherFast("台北市") %>%
system.time()
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
askSillyWeatherFast("台北市") %>%
system.time()
# 先前的askSilly_weather函數，如果使用者
#   1. 沒有安裝jsonlite
#   2. 縣市裡的「臺」使用簡體「台」
#   都會產生錯誤訊息。
# 請修改函數，讓使用者不管有沒有安裝jsonlite或使用簡體「台」都沒問題。
askSillyWeather <- function(locationInput){
if(!require(jsonlite)){
install.packages("jsonlite")
}
if(str_detect(locationInput, "^台")){
str_replace(
locationInput, "^台", "臺"
) ->
locationInput
}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
# fast function
askSillyWeatherFast <- function(locationInput){
if(!require(jsonlite)){
install.packages("jsonlite")
}
if(!require(glue)){
install.packages("glue")
}
if(!require(SOAR)){
install.packages("SOAR")
}
if(str_detect(locationInput, "^台")){
str_replace(
locationInput, "^台", "臺"
) ->
locationInput
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 將存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
# slow function
askSillyWeatherSlow <- function(locationInput){
if(!require(jsonlite)){
install.packages("jsonlite")
}
if(!require(glue)){
install.packages("glue")
}
if(!require(SOAR)){
install.packages("SOAR")
}
if(str_detect(locationInput, "^台")){
str_replace(
locationInput, "^台", "臺"
) ->
locationInput
}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
askSillyWeatherFast("台北市") %>%
system.time()
askSillyWeatherSlow("台北市") %>%
system.time()
askSillyWeatherFast("台北市") %>%
system.time()
askSillyWeatherSlow("台北市") %>%
system.time()
askSillyWeatherFast("台北市") %>%
system.time()
askSillyWeatherSlow("台北市") %>%
system.time()
askSillyWeatherFast("台北市") %>%
system.time()
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
detach(name = ".R_Cache")
system.time(askSillyWeatherFast("台北市"))
system.time(askSillyWeatherFast("台北市"))
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
detach(name = ".R_Cache")
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
detach(name = ".R_Cache")
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
detach(name = ".R_Cache")
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
detach(name = ".R_Cache")
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))    # 有資料時，elapse time = 0
detach(name = ".R_Cache")
sessionInfo()
sessionInfo() -> jack
View(jack)
jack$otherPkgs
paste0("123", jack$otherPkgs)
paste("123", jack$otherPkgs, sep = "")
paste("package: ", jack$otherPkgs, sep = "")
jack$otherPkgs
jack$otherPkgs$SOAR
jack$otherPkgs
jack$otherPkgs[[1]]
jack$otherPkgs[[1]]$Package
View(jack)
jack$otherPkgs
map(jack$otherPkgs, ~ .x[[1]]$Package)
map(jack$otherPkgs, ~ .x[[1]])
map(jack$otherPkgs, ~ .x[[1]][[1]])
jack$otherPkgs
jack$otherPkgs[[2]]
sessionInfo()$otherPkgs -> jack
jack
map(jack, ~ .x[[1]])
jack
View(jack)
jack[c(1, n())]
n(jack)
length(jack)
jack[c(1:length(jack))]
jack[c(1:length(jack))]$Package
jack[c(1:length(jack))]
jack
View(jack)
jack[[1]]
jack[[1]]$Package
map(jack, ~ .x[[1]])
sessionInfo()$otherPkgs -> jack
map(jack, ~ .x[[1]])
map(jack, ~ .x[[1]]) %>%
unlist()
map(jack, ~ .x[[1]]) %>%
unlist() -> name_vec
paste("package: ", name_vec, sep = "")
paste0("package: ", name_vec)
detach(name = paste0("package: ", name_vec))
map(paste0("package: ", name_vec), ~ detach(.x))
map(paste0("package: ", name_vec), ~ detach(name = .x))
paste0("package: ", name_vec)
paste0("package: ", name_vec) -> jack1
jack1
map(jack1, ~ detach(name = .x))
map(jack1, ~ detach(name = .x, character.only = T))
sessionInfo()$otherPkgs -> jack
map(jack, ~ .x[[1]]) %>%
unlist() -> name_vec
sessionInfo()$otherPkgs -> jack
map(jack, ~ .x[[1]]) %>%
unlist() -> name_vec
paste0("package: ", name_vec)
lapply(paste0("package: ", name_vec), FUN = detach, character.only = T)
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
names(sessionInfo()$otherPkgs)
names(sessionInfo()$otherPkgs)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
names(sessionInfo()$otherPkgs)
names(sessionInfo()$otherPkgs) -> jkl
jkl
jkl
paste0("package: ", name_vec)
paste('package:',jkl,sep="")
paste0("package: ", name_vec)
lapply(paste0("package:", name_vec), FUN = detach, character.only = T)
paste('package:',jkl,sep="")
paste0("package:", name_vec)
sessionInfo()$otherPkgs -> jack
map(jack, ~ .x[[1]]) %>%
unlist() -> name_vec
lapply(paste0("package:", name_vec), FUN = detach, character.only = T)
names(sessionInfo()$otherPkgs) -> jkl
paste('package:',jkl,sep="")
paste0("package:", name_vec)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
View(jack)
sessionInfo()$otherPkgs# -> jack
names(sessionInfo()$otherPkgs)
names(sessionInfo()$otherPkgs)
paste0("package:", name_vec)
sessionInfo()$otherPkgs -> jack
map(jack, ~ .x[[1]]) %>%
unlist() -> name_vec
names(sessionInfo()$otherPkgs)
paste0("package:", name_vec)
lapply(paste0("package:", name_vec), FUN = detach, character.only = T)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
sessionInfo()$otherPkgs
map(jack, ~ .x[[1]]) %>%
unlist()
sessionInfo()$otherPkgs
sessionInfo()$otherPkgs %>%
map(., ~ .x[[1]]) %>%
unlist()
sessionInfo()$otherPkgs
sessionInfo()$otherPkgs %>%
names()
sessionInfo()$otherPkgs %>%
names() ->
jack
lapply(paste0("package:", jack), FUN = detach, character.only = T)
loadedNamespaces()
clear_otherPackage <- function(){
sessionInfo()$otherPkgs %>%
names() ->
jack
lapply(paste0("package:", jack), FUN = detach, character.only = T)
}
# name space：命名空間
clear_otherPackage()
clear_otherPackage <- function(){
if(!require(magrittr)){
install.packages("magrittr")
}
library(magrittr)
sessionInfo()$otherPkgs %>%
names() ->
jack
lapply(paste0("package:", jack), FUN = detach, character.only = T)
}
clear_otherPackage()
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
clear_otherPackage()
