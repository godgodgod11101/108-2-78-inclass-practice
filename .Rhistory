sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums %% 2    # 餘數為1則是奇數，0則是偶數
5 * c(1, 3, 4) + 7
# 等於
c(5,5,5) * c(1,3,4) + c(7,7,7)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
# 等於
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
# 等於
c(2,3,2)/c(-2,-13,10)
#rRecycle不只用在數值class
paste0(
c("我叫"), c("小明","小美")
)
# 等於
paste0(
c("我叫","我叫"), c("小明","小美")
)
paste0(
c("他叫","我叫"), c("小明","小美","大雄")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example[c("name", "height")])
# example裡誰的身高大於等於170
example$name[c(T, F, T, F)]    # 爛方法
example$height >= 170 -> pickAbove170
example$name[pickAbove170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
table(transcript100to103[c(1, 2)])
table(transcript100to103)
table(transcript100to103[c(1, 2)]
table(transcript100to103[c(1, 2)]
table(transcript100to103[c(1, 2)])
View(example)
View(transcript100to103)
transcript100to103[c(1, 2)]
table(transcript100to103[c(1, 2)])
# 各學屆二年級人數
table(transcript100to103$學屆)    # 分類數次數
# contingency table: 列聯表
# 選成績大於85分
transcript100to103$成績 > 85 -> pickAbove85
table(transcript100to103$學屆[pickAbove85])
example$birthday
class(example$birthday)
typeof(example$birthday)
print(example[c("name", "birthday")])
as.double(example$birthday)
example$birthday
typeof(example$birthday)
# example裡誰1998年（含）以後出生
print(example[c("name", "birthday")])
example$birthday >= lubridate::ymd("19980101") ->
pickAfter98
# typeof(example$birthday)
#   時間資料原始型態為double，可以比大小
example$name[pickAfter98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
View(exchangeRate)
list(
`期間` = exchangeRate$期間[pickAfter1998],
`幣別` = exchangeRate$幣別[pickAfter1998],
`匯率` = exchangeRate$匯率[pickAfter1998]
) #->
# 選出1998年1月（含）以後的匯率資料
exchangeRate$期間 >= lubridate::ymd("19980101") ->
pickAfter1998
list(
`期間` = exchangeRate$期間[pickAfter1998],
`幣別` = exchangeRate$幣別[pickAfter1998],
`匯率` = exchangeRate$匯率[pickAfter1998]
) #->
exchangeRate_after1998
# 選出1998年1月（含）以後的匯率資料
exchangeRate$期間 >= lubridate::ymd("19980101") ->
pickAfter1998
list(
`期間` = exchangeRate$期間[pickAfter1998],
`幣別` = exchangeRate$幣別[pickAfter1998],
`匯率` = exchangeRate$匯率[pickAfter1998]
) ->
exchangeRate_after1998
print(example[c("name", "allowance")])
#example$allowance >= "1001-2000"    # not ordered factor
class(example$allowance)
example$allowance <-
ordered(
example$allowance
)
class(example$allowance)
example$allowance >= "1001-2000" ->
pickOver1000
example$name[pickOver1000]
class(example$allowance)
# 也可以在設factor時直接設好ordered
factor(
c("0-1000", "1001-2000", "2000+", "1001-2000"),
levels = c("0-1000", "1001-2000", "2000+"),
ordered = T    # 設定為可排序的factor
)
levels(example$allowance)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
View(list_victimAges_female)
str(list_victimAges_female)
View(list_victimAges_female)
View(list_victimAges_female$年齡層)
View(list_victimAges_female$年齡層)
list_victimAges_female$年齡層
library(dplyr)
list_victimAges_female$年齡層 %>% class()
list_victimAges_female$年齡層 %>%
table()
print(list_victimAges_female$年齡層)
View(list_victimAges_female)
str(list_victimAges_female)
# View(list_victimAges_female$年齡層)
list_victimAges_female$年齡層 %>%
as.factor()
list_victimAges_female$年齡層 %>%
as.factor() %>%
levels()
list_victimAges_female$年齡層 %>%
as.ordered() %>%
levels()
list_victimAges_female$年齡層 %>%
as.ordered() %>%
class()
list_victimAges_female$年齡層 %>%
as.ordered() ->
list_victimAges_female$年齡層_ordered
View(list_victimAges_female)
list_victimAges_female$年齡層_ordered >= "30_39歲"
list_victimAges_female$年齡層_ordered >= "30_39歲" ->
choose_above3039
View(list_victimAges_female)
list_victimAges_female$數目
View(example)
example$allowance <-
ordered(
example$allowance
)
class(example$allowance)
levels(example$allowance)
example$allowance >= "1001-2000" ->
pickOver1000
example$name[pickOver1000]
list_victimAges_female$數目[choose_above3039]
list_victimAges_female$數目[choose_above3039] %>%
sum()
list_victimAges_female$數目[choose_above3039] %>%
as.integer() %>%
sum
list_victimAges_female$數目[choose_above3039] %>%
as.integer() %>%
sum()
list_victimAges_female$數目[choose_above3039] %>%
as.integer() %>%
sum(na.rm = T)
View(list_victimAges_female)
# 選出「30_39歲以上受害者」的數目
library(dplyr)
list_victimAges_female$年齡層 %>%
as.ordered() ->
list_victimAges_female$年齡層_ordered
list_victimAges_female$年齡層_ordered >= "30_39歲" ->
choose_above3039
list_victimAges_female$數目[choose_above3039] %>%
sum(na.rm = T)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female)
# View(list_victimAges_female$年齡層)
list_victimAges_female$年齡層
list_victimAges_female$年齡層 %>%
as.ordered() ->
list_victimAges_female$年齡層_ordered
list_victimAges_female$年齡層 %>%
factor() %>%
levels()
1:5
#levels = c(12, 13, 1:)
) %>%
list_victimAges_female$年齡層 %>%
factor(
#levels = c(12, 13, 1:)
) %>%
levels()
list_victimAges_female$年齡層 %>%
factor(
levels = c(12, 13, 1:11)
) %>%
levels()
#levels = c(12, 13, 1:11)
) %>%
list_victimAges_female$年齡層 %>%
factor(
#levels = c(12, 13, 1:11)
) %>%
levels()
list_victimAges_female$年齡層# %>%
factor(
#levels = c(12, 13, 1:11)
) %>%
levels()
list_victimAges_female$年齡層# %>%
as.factor() %>%
levels()
list_victimAges_female$年齡層 %>%
as.factor() %>%
levels()
list_victimAges_female$年齡層 %>%
as.factor() %>%
levels() ->
levelOfAge
#levelOfAge_mod <-
levelOfAge
#levelOfAge_mod <-
levelOfAge[c(12, 13, 1, 8, 2:7, 9:11)]
levelOfAge_mod <-
levelOfAge[c(12, 13, 1, 8, 2:7, 9:11)]
list_victimAges_female$年齡層 %>%
factor(
levels = levelOfAge_mod
) %>%
levels()
# 選出「30_39歲以上受害者」的數目
library(dplyr)
list_victimAges_female$年齡層 %>%
as.factor() %>%
levels() ->
levelOfAge
levelOfAge_mod <-
levelOfAge[c(12, 13, 1, 8, 2:7, 9:11)]
list_victimAges_female$年齡層 %>%
factor(
levels = levelOfAge_mod,
ordered = T
) ->
list_victimAges_female$年齡層_ordered
# list_victimAges_female$年齡層 %>%
#   as.ordered() ->
#   list_victimAges_female$年齡層_ordered
list_victimAges_female$年齡層_ordered >= "30_39歲" ->
choose_above3039
list_victimAges_female$數目[choose_above3039] %>%
sum(na.rm = T)
# 選出「30_39歲以上受害者」的數目
library(dplyr)
# 設level向量
list_victimAges_female$年齡層 %>%
as.factor() %>%
levels() ->
levelOfAge
# 調成正確順序
levelOfAge_mod <-
levelOfAge[c(12, 13, 1, 8, 2:7, 9:11)]
# 更改 年齡層 為ordered
list_victimAges_female$年齡層 %>%
factor(
levels = levelOfAge_mod,
ordered = T
) ->
list_victimAges_female$年齡層_ordered
list_victimAges_female$年齡層_ordered >= "30_39歲" ->
choose_above3039
list_victimAges_female$數目[choose_above3039] %>%
sum(na.rm = T)
print(example[c("name", "bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
print(example[c("name", "bloodType")])
# example裡誰血型B型
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
# 取出偶數
pick_even <- (sequenceNums %% 2) == 0    # 確保()內先執行
sequenceNums[pick_even]
x <- c(1,5,8)
y <- c(5,8)
x %in% y    # x裡的每個元素值是不是屬於y集合
example[c("name", "residence")]
pick_fromTaipeiMetro <- example$residence %in% c("Taipei", "New Taipei")
example$name[pick_fromTaipeiMetro]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
levels(factor(transcript100to103$學院))    # 看資料有哪幾種學院
unique(transcript100to103$學院)    # 看資料有哪幾種學院
levels(factor(transcript100to103$學院))    # 看資料有哪幾種學院
unique(transcript100to103$學院)    # 看資料有哪幾種學院
pick_lawBusiness <- transcript100to103$學院 %in% c("法學院", "商學院")
pick_lawBusiness
# 創造可選出來自法商學院的True or False向量
levels(factor(transcript100to103$學院))    # 看資料有哪幾種學院
unique(transcript100to103$學院)    # 看資料有哪幾種學院
pick_lawBusiness <- transcript100to103$學院 %in% c("法學院", "商學院")
# 在 TorF向量 前加上 ! 會成為否定句的 TorF向量
pick_notFromTaipeiMetro <- !pick_fromTaipeiMetro
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name", "bloodType")])
# example裡誰血型B型
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
# 取出偶數
pick_even <- (sequenceNums %% 2) == 0    # 確保()內先執行
sequenceNums[pick_even]
# example裡誰來自大台北
example[c("name", "residence")]
pick_fromTaipeiMetro <- example$residence %in% c("Taipei", "New Taipei")
example$name[pick_fromTaipeiMetro]
pick_notFromTaipeiMetro <- !pick_fromTaipeiMetro
pick_notFromTaipeiMetro <- !(example$residence %in% c("Taipei", "New Taipei"))
pick_notFromTaipeiMetro
example$name[pick_fromTaipeiMetro]
example$name[pick_notFromTaipeiMetro]
# 在 TorF向量 前加上 ! 會成為否定句的 TorF向量
pick_notFromTaipeiMetro <- !pick_fromTaipeiMetro
pick_notFromTaipeiMetro <- !(example$residence %in% c("Taipei", "New Taipei"))
pick_notFromTaipeiMetro
example$name[pick_fromTaipeiMetro]
example$name[pick_notFromTaipeiMetro]
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name", "bloodType")])
print(example[c("name", "bloodType")])
# example裡誰血型B型
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
x <- c(1,5,8)
y <- c(5,8)
x %in% y    # x裡的每個元素值是不是屬於y集合
# example裡誰來自大台北
example[c("name", "residence")]
pick_fromTaipeiMetro <- example$residence %in% c("Taipei", "New Taipei")
example$name[pick_fromTaipeiMetro]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 創造可選出來自法商學院的True or False向量
levels(factor(transcript100to103$學院))    # 看資料有哪幾種學院
unique(transcript100to103$學院)    # 看資料有哪幾種學院
pick_lawBusiness <- transcript100to103$學院 %in% c("法學院", "商學院")
# 在 TorF向量 前加上 ! 會成為否定句的 TorF向量
pick_notFromTaipeiMetro <- !pick_fromTaipeiMetro
pick_notFromTaipeiMetro <- !(example$residence %in% c("Taipei", "New Taipei"))
pick_notFromTaipeiMetro
example$name[pick_fromTaipeiMetro]
example$name[pick_notFromTaipeiMetro]
x2 <- c(1, NA, 10)
y2 <- c(-1, NA, 20)
x3 <- c(NA, "小花")
y3 <- c(NA, "小華")
x2
is.na(x2)
print(example[c("name","weight")])
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name","weight")])
choose_na <- is.na(example$weight)
example$name[choose_na]
log(-10)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
head(list_victimAges_female)
head(list_victimAges_female$數目)
View(list_victimAges_female)
is.na(list_victimAges_female$數目)
is.na(list_victimAges_female$數目) -> pick_na
sum(pick_na)
!is.na(list_victimAges_female$數目) -> pick_na
sum(pick_na)    # True=1, False=0
is.na(list_victimAges_female$數目) -> pick_na
sum(pick_na)    # True=1, False=0
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name", "hobby")])
stringr::str_detect(example$hobby, pattern = "美食")
stringr::str_detect(example$hobby, pattern = "美食") -> pick_food
example[pick_food]
example$name[pick_food]
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
typeof(garbageRoutes)
class(garbageRoutes)
garbageRoutes
factor(garbageRoutes)
factor(garbageRoutes$lineName)
garbageRoutes$lineName
View(garbageRoutes)
typeof(garbageRoutes)    # 本質為list
class(garbageRoutes)    # class為data.frame表示它有比list多了許多操作空間
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
typeof(garbageRoutes)    # 本質為list
class(garbageRoutes)    # class為data.frame表示它有比list多了許多操作空間
# 由linename元素判斷垃圾車有幾條路線
garbageRoutes$lineName
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
typeof(garbageRoutes)    # 本質為list
class(garbageRoutes)    # class為data.frame表示它有比list多了許多操作空間
View(garbageRoutes)
library(stringr)
?str_detect
library(stringr)
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "a$")    # "a$"---"a"結尾
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
str_detect("aecfg", letters)
str_detect(fruit, "a$", negate = T)
str_detect(fruit, "a$")    # "a$"---"a"結尾
str_detect(fruit, "a$", negate = T)
# Also vectorised over pattern
str_detect("aecfg", letters)
# Also vectorised over pattern
str_detect(string = "aecfg", pattern = letters)
# Also vectorised over pattern
str_detect("bbbbc", letters)
str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
str_detect("bbbbc", letters)
# 看不懂說明，貼上範例試試
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")    # 字元規律描述（regular expression）："^a"---以"a"開頭
str_detect(fruit, "a$")    # "a$"---"a"結尾
str_detect(fruit, "a$", negate = T)
!str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
View(CDC_chatbox)
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
View(CDC_chatbox)
