names(.) %>%
.[[1]]
# 由cities創出每個元素對應的地區（regions）
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
cities %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部")
# 等於
cities %>%
levels() %>%
str_replace(pattern = "台北", "北部") %>%
str_replace(pattern = "花蓮|台東", "東部") %>%
str_replace(pattern = "台中", "中部")
cities %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部")
# 等於
cities %>%
levels() %>%
str_replace(pattern = "台北", "北部") %>%
str_replace(pattern = "花蓮|台東", "東部") %>%
str_replace(pattern = "台中", "中部")
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 原始作法
names(sort(population)) -> setLevels
factor(cities, levels = setLevels) -> cities
# pipe expression (wrong)
population %>%
names(sort(.)) %>%
factor(cities, levels = .)
# pipe expression
population %>%
names(.) %>%
sort(.)
# pipe expression
population %>%
sort(.) %>%
names(.)
# pipe expression
population %>%
sort(.) %>%
names(.) %>%
factor(cities, levels = .)
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 原始作法
names(sort(population)) -> setLevels
factor(cities, levels = setLevels)
# pipe expression
population %>%
sort(.) %>%
names(.) %>%
factor(cities, levels = .)
# 要小心 %>% 是將左邊output放到右邊函數，右邊函數指的是最外圍的函數
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 原始作法
names(sort(population)) -> setLevels
factor(cities, levels = setLevels)
# pipe expression (wrong)
# population %>%
#   names(sort(.)) %>%
#   factor(cities, levels = .)
# pipe expression
population %>%
sort(.) %>%
names(.) %>%
factor(cities, levels = .)
library(readr)
library(lubridate)
library(stringr)
library(glue)
library(purrr)
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
purrr::map(dataList, ~is.numeric(.x))
purrr::map(dataList, is.numeric)
purrr::map(dataList, ~is.numeric(.x)) -> pick_numeric
pick_numeric
unlist(pick_numeric) -> pick_numericV
dataList[pick_numericV]
dataList[pick_numericV] > 50
dataList[pick_numericV]$num > 50
dataList[pick_numericV]$num > 50 -> pick_big    # list無法比大小
dataList[pick_numericV]$num[pick_big]
# 找出dataList中元素class為numeric裡那些大於50的數字
purrr::map(dataList, ~is.numeric(.x)) -> pick_numeric
purrr::map(dataList, is.numeric)    # 省略寫法
unlist(pick_numeric) -> pick_numericV    # unlist()：分解list成為named vector
dataList[pick_numericV]$num > 50 -> pick_big    # list無法比大小
dataList[pick_numericV]$num[pick_big]
dataList %>%
map(~ is.numeric(.x))
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.)
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.][[1]]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.][[1]]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.]$num
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
.[[1]]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
.[[1]] > 50
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
(.[[1]] > 50)
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
.[[1]] > 50
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
(.[[1]] > 50)
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
{(.[[1]] > 50)}
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
{(.[[1]] > 50)} -> pick_big
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.][[1]][pick_big]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
{dataList[.][[1]][pick_big]}
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# pipe expression (wrong)
population %>%
names(sort(.)) %>%
factor(cities, levels = .)
# pipe expression (wrong)
population %>%
{names(sort(.))} %>%
factor(cities, levels = .)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)
library(lubridate)
library(stringr)
library(glue)
library(purrr)
library(magrittr)
demand <-
function(p){
q_d <- 10-5*p
}
demand()
demand
demand(1.2)
demand(1.2)
demand(p = 1.2)
qd
# 創造一個物件叫demand的函數
demand <-
function(p){
q_d <- 10-5*p
}
demand
demand(p = 1.2)
return(q_d)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
demand_return(1.2)    # 有output，但Global Environment並不會有q_d
.Last.value
2+3
.Last.value
.Last.value
demand(1.2)
demand(1.2) -> Qd
# 等於
4 -> Qd
rm(Qd)
q_d <- 8
demand_return(1.2)
print(q_d)
# {...}裡所創造的物件都只是「暫時的」且「不放在global environment」，
# 所以global environment裡就算有同名物件，也不會因函數運作而被不小心更動。
q_d <- 8
demand_return(1.2)
print(q_d)
# {...}裡所創造的物件都只是「暫時的」且「不放在global environment」，
# 所以global environment裡就算有同名物件，也不會因函數運作而被不小心更動。
q_d <- 8
demand_return(1.2)
print(q_d)
today()
lubridate::today()
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
locationInput <- "新北市"
weather_next36hours %>% str()
weather_next36hours$cwbopendata$dataset
weather_next36hours$cwbopendata$dataset %>% view
weather_next36hours$cwbopendata$dataset %>% view()
weather_next36hours$cwbopendata$dataset %>% View()
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location
pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location]
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location] %>% View()
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]]
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]]) ->
locationWeather
locationWeather
View(locationWeather)
View(locationWeather[[2]][[1]])
locationWeather$elementName
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT")
(locationWeather$elementName == "MaxT") -> pick_maxT
(locationWeather$elementName == "MinT") -> pick_minT
locationWeather$time
locationWeather[pick_maxT]
View(locationWeather)
View(locationWeather[[2]][[2]])
View(locationWeather[[2]][[2]])
locationWeather$time
View(locationWeather)
View(locationWeather[[2]][[2]])
locationWeather$time[pick_maxT]
View(locationWeather[[2]][[2]])
locationWeather$time[pick_maxT]
locationWeather$time[pick_maxT] %>% View()
View(locationWeather)
View(locationWeather[[2]][[2]])
locationWeather$time[pick_maxT][[1]]
locationWeather$time[pick_maxT][[1]]$parameter$parameterName
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]]
locationWeather
locationWeather$time[pick_minT]
locationWeather$time[pick_minT][[1]]
locationWeather$time[pick_minT][[1]]$parameter
locationWeather$time[pick_minT][[1]]$parameter[[1]]
locationWeather$time[pick_minT][[1]]$parameter$parameterName
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]]
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput}{today()}")
glue::glue("{locationInput} {today()}")
glue::glue("{locationInput} {today()} 氣溫，最高{maxT}度")
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫，最高{maxT}度")
glue::glue("{locationInput} {today()} 氣溫，最高{maxT}度，最低{minT}度。")
View(locationWeather)
View(locationWeather[[2]][[2]])
locationWeather$time
locationWeather$time[pick_maxT]
locationWeather$time[pick_maxT][[1]]
locationWeather$time[pick_maxT][[1]]$startTime[[1]]
locationWeather$time[pick_maxT][[1]]$startTime[[1]] %>%
str_replace("{today()}")
locationWeather$time[pick_maxT][[1]]$startTime[[1]] %>%
str_replace("{today()}", "今晚")
locationWeather$time[pick_maxT][[1]]$startTime[[1]] %>%
str_replace("18", "今晚")
locationWeather$time[pick_maxT][[1]]$startTime[[1]] %>%
str_replace(
glue("{today()}18:00:00"), "今晚"
)
locationWeather$time[pick_maxT][[1]]$startTime[[1]] %>%
str_replace(
glue("{today()}T18:00:00"), "今晚"
)
locationWeather$time[pick_maxT][[1]]$startTime[[1]] %>%
str_replace(
glue("{today()}T18:00:00+08:00"), "今晚"
)
locationWeather$time[pick_maxT][[1]]$startTime[[1]] %>%
str_replace(
glue("{today()}T18:00:00+08:00"), "今晚"
)
locationWeather$time[pick_maxT][[1]]$startTime[[1]] %>%
str_replace(
glue("{today()}T18:00:00"), "今晚"
)
locationWeather$time[pick_maxT][[1]]$startTime[[1]] %>%
str_replace(
glue("{today()}T18:00:00+08:00"), "今晚"
)
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
askSillyWeather <- function(locationInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
askSillyWeather(locationInput = "台北市")
askSillyWeather(locationInput = "(台臺)北市")
askSillyWeather(locationInput = "新北市")
View(weather_next36hours)
View(weather_next36hours)
askSillyWeather(locationInput = "桃園市")
askSillyWeather(locationInput = "臺北市")
askSillyWeather(locationInput = "[台臺]北市")
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
locationInput <- "[台臺]北市"    # 輸入"地區"
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
pick_location
pick_location
# 住三峽的小雯問：“Silly，今天天氣如何？”
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
locationInput <- "新北市"    # 輸入"地區"
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
# 建立氣象預報機器人
askSillyWeather <- function(locationInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
askSillyWeather(locationInput = "臺北市")
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
weather_next36hours$cwbopendata$dataset$location
View(weather_next36hours)
weather_next36hours$cwbopendata$dataset$location$locationName
weather_next36hours$cwbopendata$dataset$location$locationName %>%
str_detect(pattern = "[台臺]北市")
askSillyWeather(locationInput = "臺北市")
askSillyWeather(locationInput = "[臺台]北市")
weather_next36hours$cwbopendata$dataset$location$locationName %>%
str_detect(pattern = "[台臺]北市")
askSillyWeather(locationInput = "臺北市")
# askSillyWeather(locationInput = "[臺台]北市")    # regex沒用
# weather_next36hours$cwbopendata$dataset$location$locationName %>%
#   str_detect(pattern = "[台臺]北市")
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)
library(lubridate)
library(stringr)
library(glue)
library(purrr)
library(magrittr)
# 建立氣象預報機器人
askSillyWeather <- function(locationInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
askSillyWeather(locationInput = "臺北市")
# askSillyWeather(locationInput = "[臺台]北市")    # regex沒用
# weather_next36hours$cwbopendata$dataset$location$locationName %>%
#   str_detect(pattern = "[台臺]北市")
View(askSillyWeather)
now
now()
class(demand_return)
# demand函數內並沒有要求output出現
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
demand_return(1.2)    # output出現，但Global Environment並不會有q_d
# 最近一步的運算值會暫時記在.Last.value
class(demand_return)
formals(demand_return)
body(demand_return)
class(demand_return)    # 函數的class
formals(demand_return)    # 函數input要求
body(demand_return)    # 函數主體
# 函數可以存在list裡
learning_topics <-
list(
subject = "函數",
date = lubridate::ymd("2020-06-03"),
functionsCreated = list(
demand = demand_return
)
)
View(learning_topics)
learning_topics$functionsCreated
learning_topics$functionsCreated$demand()
learning_topics$functionsCreated$demand
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
environment(demand_return)
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
rm(intercept, slope)
myDemand(1.2)
myDemand(1.2)
intercept <- 10
slope <- -5
myDemand(1.2)
myDemand(1.2)
slope <- -1
myDemand(1.2)
rm(intercept, slope)
myDemand(1.2)
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
rm(intercept, slope)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
codetools::findGlobals(myDemand2)
myDemand2(1.2)
myDemand2(1.2, slope = -1)
myDemand2(1.2, intercept = 5, slope = -1.2)
