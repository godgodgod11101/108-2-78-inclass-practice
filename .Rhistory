library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
View(jack)
sessionInfo()$otherPkgs# -> jack
names(sessionInfo()$otherPkgs)
names(sessionInfo()$otherPkgs)
paste0("package:", name_vec)
sessionInfo()$otherPkgs -> jack
map(jack, ~ .x[[1]]) %>%
unlist() -> name_vec
names(sessionInfo()$otherPkgs)
paste0("package:", name_vec)
lapply(paste0("package:", name_vec), FUN = detach, character.only = T)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
sessionInfo()$otherPkgs
map(jack, ~ .x[[1]]) %>%
unlist()
sessionInfo()$otherPkgs
sessionInfo()$otherPkgs %>%
map(., ~ .x[[1]]) %>%
unlist()
sessionInfo()$otherPkgs
sessionInfo()$otherPkgs %>%
names()
sessionInfo()$otherPkgs %>%
names() ->
jack
lapply(paste0("package:", jack), FUN = detach, character.only = T)
loadedNamespaces()
clear_otherPackage <- function(){
sessionInfo()$otherPkgs %>%
names() ->
jack
lapply(paste0("package:", jack), FUN = detach, character.only = T)
}
# name space：命名空間
clear_otherPackage()
clear_otherPackage <- function(){
if(!require(magrittr)){
install.packages("magrittr")
}
library(magrittr)
sessionInfo()$otherPkgs %>%
names() ->
jack
lapply(paste0("package:", jack), FUN = detach, character.only = T)
}
clear_otherPackage()
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
clear_otherPackage()
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
# detach("package:stringr")    # 「收回」套件
# fast function
askSillyWeatherFast <- function(locationInput){
if(!require(jsonlite)){
install.packages("jsonlite")
}
if(!require(glue)){
install.packages("glue")
}
if(!require(SOAR)){
install.packages("SOAR")
}
if(str_detect(locationInput, "^台")){
str_replace(
locationInput, "^台", "臺"
) ->
locationInput
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 將存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
# slow function
askSillyWeatherSlow <- function(locationInput){
if(!require(jsonlite)){
install.packages("jsonlite")
}
if(!require(glue)){
install.packages("glue")
}
if(!require(SOAR)){
install.packages("SOAR")
}
if(str_detect(locationInput, "^台")){
str_replace(
locationInput, "^台", "臺"
) ->
locationInput
}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) ->
pick_location    # 創造取出"地區"氣象資料的vector
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] ->
locationWeather
(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector
locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))    # 有資料時，elapse time = 0
detach(name = ".R_Cache")    # 清除cache
system.time(askSillyWeatherFast("台北市"))
system.time(askSillyWeatherFast("台北市"))
#detach(name = ".R_Cache")    # 清除cache
SOAR::Remove(weather_next36hours)
system.time(askSillyWeatherFast("台北市"))
#detach(name = ".R_Cache")    # 清除cache
SOAR::Remove(weather_next36hours)
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))    # 有資料時，elapse time = 0
#detach(name = ".R_Cache")    # 清除cache
SOAR::Remove(weather_next36hours)    #  清除.R_Cache 裡的東西
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))
system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))    # 有資料時，elapse time = 0
detach(name = ".R_Cache")    # 清除cache
#SOAR::Remove(weather_next36hours)    #  清除.R_Cache 裡的東西
n = 30
(n %% 2) == 1
n = 31
(n %% 2) == 1
as.logical(n %% 2)
n = 31
as.logical(n %% 2)
n = 30
as.logical(n %% 2)
n = 30
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
n = 31
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
n = 29
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
n = 30
n = 30
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
n = 29
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
n = 33
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
# (n %% 2) == 1
# as.logical(n %% 2)
return(n)
jackFun <- function(n){
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
return(n)
}
jackFun(33)
return(ans)
jackFun <- function(n){
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
} ->
ans
return(ans)
}
jackFun(33)
return(fValue)
jackFun <- function(n){
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
return(fValue)
}
jackFun(33)
jackFun(54)
# 寫成函數
jackFun <- function(n){
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
return(fValue)
}
jackFun(33)
jackFun(54)
as.logical(52)
as.logical(45)
as.logical(45)
as.logical(433)
as.logical(0)
as.logical(1)
as.logical(0)
n = 33
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
as.logical(n %% 2)    # 0轉成False，1轉成True
as.logical(1)
as.logical(0)
n = 33
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
n = 33
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
n = 55
if(
(n %% 2) == 1
){
fValue <- -(n+1)/2
} else{
fValue <- n/2
}
as.logical(n %% 2)    # 0轉成False，1轉成True
as.logical(1)
as.logical(0)
examSubmissionTime <- jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1")
View(examSubmissionTime)
head(examSubmissionTime$section)
head(examSubmissionTime$time)
head(examSubmissionTime$section)
head(examSubmissionTime$time)
examSubmissionTime$section[[1]]
examSubmissionTime$time[[1]]
i <- 5
examSubmissionTime$section[[i]]
examSubmissionTime$time[[i]]
i <- 5
examSubmissionTime$section[[i]] -> stu_i_sec
examSubmissionTime$time[[i]] -> stu_i_time
View(examSubmissionTime)
View(examSubmissionTime)
i <- 5
examSubmissionTime$section[[i]] -> stu_i_sec
examSubmissionTime$time[[i]] -> stu_i_time
lubridate::ymd_hms(stu_i_time, tz = "Asia/Taipei")
if(stu_i_sec=="56"){
stu_i_time - lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei")
} else{
stu_i_time - lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei")
}
i <- 5
examSubmissionTime$section[[i]] -> stu_i_sec
examSubmissionTime$time[[i]] -> stu_i_time
lubridate::ymd_hms(stu_i_time, tz = "Asia/Taipei") -> stu_i_time
if(stu_i_sec=="56"){
stu_i_time - lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei")
} else{
stu_i_time - lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei")
}
i <- 5
examSubmissionTime$section[[i]] -> stu_i_sec
examSubmissionTime$time[[i]] -> stu_i_time
lubridate::ymd_hms(stu_i_time, tz = "Asia/Taipei") -> stu_i_time
if(stu_i_sec=="56"){
lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei") - stu_i_time
} else{
lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time
}
i <- 2
examSubmissionTime$section[[i]] -> stu_i_sec
examSubmissionTime$time[[i]] -> stu_i_time
lubridate::ymd_hms(stu_i_time, tz = "Asia/Taipei") -> stu_i_time
if(stu_i_sec=="56"){
lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei") - stu_i_time
} else{
lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time
}
lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time
lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time %>%
second()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
second()
minute(20)
`minute<-`(1)
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
dseconds()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration() %>%
dseconds()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration() %>%
minute()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration() %>%
minutes()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration() #%>%
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
minutes()
minutes(3.95)
minutes(3)
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
dseconds()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration() %>%
minutes()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration() %>%
seconds() %>%
minutes()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration() %>%
seconds()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
class()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
typeof()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
class()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
is.difftime()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.double()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
seconds()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
minutes()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration() %>%
class()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
dseconds()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.difftime(format = %s)
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.difftime(format = "%Y-%m-%d %H:%M:%S")
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.difftime(format = "%S")
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.difftime(format = "%S")
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.difftime(units = "secs")
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.difftime(units = "secs")
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
double()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.double()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.numeric()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration()
(lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time) %>%
as.duration() %>%
as.double()
i <- 2
examSubmissionTime$section[[i]] -> stu_i_sec
examSubmissionTime$time[[i]] -> stu_i_time
lubridate::ymd_hms(stu_i_time, tz = "Asia/Taipei") -> stu_i_time
if(stu_i_sec=="56"){
lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei") - stu_i_time
} else{
lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time
}
# 寫成函數
compute_earlyTime <- function(i){
examSubmissionTime$section[[i]] -> stu_i_sec
examSubmissionTime$time[[i]] -> stu_i_time
lubridate::ymd_hms(stu_i_time, tz = "Asia/Taipei") -> stu_i_time
if(stu_i_sec=="56"){
lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei") - stu_i_time ->
earlyTime
} else{
lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time ->
earlyTime
}
return(earlyTime)
}
compute_earlyTime(5)
compute_earlyTime(3)
compute_earlyTime(2)
compute_earlyTime(155)
compute_earlyTime(154)
View(examSubmissionTime)
compute_earlyTime(152)
i <- 5
i <- 5
examSubmissionTime$section[[i]] -> stu_i_sec
examSubmissionTime$time[[i]] -> stu_i_time
lubridate::ymd_hms(stu_i_time, tz = "Asia/Taipei") -> stu_i_time
if(stu_i_sec=="56"){
lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei") - stu_i_time
} else{
lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei") - stu_i_time
}
compute_earlyTime(5)
