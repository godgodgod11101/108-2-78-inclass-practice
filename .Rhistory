ymd_hms(tz = "Asia/Taipei") ->
# 將date time轉成類別資料
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
) %>%
ymd_hms(tz = "Asia/Taipei") ->
cutPoints
robot_mom <- function(nowTime){
library(lubridate)
library(glue)
print("請在每日01:00-06:00更新一次此函數")
# 將character轉成date time
nowTime %>%
ymd_hms(tz = "Asia/Taipei") ->
nowTime
# 將date time轉成類別資料
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
) %>%
ymd_hms(tz = "Asia/Taipei") ->
cutPoints
}
robot_mom <- function(nowTime){
library(lubridate)
library(glue)
print("請在每日01:00-06:00更新一次此函數")
# 將character轉成date time
nowTime %>%
ymd_hms(tz = "Asia/Taipei") ->
nowTime
# 將date time轉成類別資料
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
) %>%
ymd_hms(tz = "Asia/Taipei") ->
# 將date time轉成類別資料
cutPoints <- c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
) %>%
ymd_hms(tz = "Asia/Taipei")
robot_mom <- function(nowTime){
library(lubridate)
library(glue)
print("請在每日01:00-06:00更新一次此函數")
# 將character轉成date time
nowTime %>%
ymd_hms(tz = "Asia/Taipei") ->
nowTime
# 將date time轉成類別資料
cutPoints <- c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
) %>%
ymd_hms(tz = "Asia/Taipei")
}
robot_mom <- function(nowTime){
library(lubridate)
library(glue)
print("請在每日01:00-06:00更新一次此函數")
# 將character轉成date time
nowTime %>%
ymd_hms(tz = "Asia/Taipei") ->
nowTime
# 將date time轉成類別資料
cutPoints <- c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
) %>%
ymd_hms(tz = "Asia/Taipei")
cut(nowTime, cutPoints) -> nowTime
# 更換level定義（變情境描述）
levels(nowTime)[c(1, 3, 5)] <- c("morning", "evening", "night")
# 產生情境對應output
switch(
as.character(nowTime),
"morning" = {
print("來點國際時事？")
browseURL("https://economist.com")
},
"evening" = {
print("點餐？")
browseURL("https://www.foodpanda.com.tw/")
},
"night" = {
print("聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
}, {
print("沒有任務")
}
)
}
robot_mom <- function(nowTime = now()){
library(lubridate)
library(glue)
print("請在每日01:00-06:00更新一次此函數")
# 將character轉成date time
nowTime %>%
ymd_hms(tz = "Asia/Taipei") ->
nowTime
# 將date time轉成類別資料
cutPoints <- c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
) %>%
ymd_hms(tz = "Asia/Taipei")
cut(nowTime, cutPoints) -> nowTime
# 更換level定義（變情境描述）
levels(nowTime)[c(1, 3, 5)] <- c("morning", "evening", "night")
# 產生情境對應output
switch(
as.character(nowTime),
"morning" = {
print("來點國際時事？")
browseURL("https://economist.com")
},
"evening" = {
print("點餐？")
browseURL("https://www.foodpanda.com.tw/")
},
"night" = {
print("聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
}, {
print("沒有任務")
}
)
}
robot_mom()
robot_mom()
robot_mom(nowTime = glue("{todaty()+days(1)} 00:06:00"))
robot_mom(nowTime = glue("{today()+days(1)} 00:06:00"))
robot_mom(nowTime = glue("{today()} 00:17:00"))
robot_mom(nowTime = glue("{today()} 17:00:00"))
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件
source(file = "./R_function/clear_otherPackage.R")    # 相對路徑
# detach("package:stringr")    # 「收回」套件
robot_mom <- function(nowTime = now()){
library(lubridate)
library(glue)
print("請在每日01:00-06:00更新一次此函數")
# 將character轉成date time
nowTime %>%
ymd_hms(tz = "Asia/Taipei") ->
nowTime
# 將date time轉成類別資料
cutPoints <- c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
) %>%
ymd_hms(tz = "Asia/Taipei")
cut(nowTime, cutPoints) -> nowTime
# 更換level定義（變情境描述）
levels(nowTime)[c(1, 3, 5)] <- c("morning", "evening", "night")
# 產生情境對應output
switch(
as.character(nowTime),
"morning" = {
print("來點國際時事？")
browseURL("https://economist.com")
},
"evening" = {
print("點餐？")
browseURL("https://www.foodpanda.com.tw/")
},
"night" = {
print("聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
}, {
print("沒有任務")
}
)
}
robot_mom(nowTime = glue("{today()+days(1)} 01:30:00"))
robot_mom(nowTime = glue("{today()+days(1)} 01:29:00"))
robot_mom(nowTime = glue("{today()+days(1)} 01:00:00"))
robot_mom(nowTime = glue("{today()+days(1)} 00:59:59"))
robot_mom(nowTime = glue("{today()+days(1)} 01:00:00"))
robot_mom(nowTime = glue("{today()} 08:00:00"))
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(myAnswer == correctAnswer){ # 只取用第一個T/F
print("你答對了")
}
if(myAnswer == correctAnswer){
print("你答對了")
}
if(myAnswer == correctAnswer){
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "true")
print("你答對了")
}
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "true")
if(myAnswer == correctAnswer){
print("你答對了")
}
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "false")
print("你答對了")
if(myAnswer == correctAnswer){
print("你答對了")
}
if(all(myAnswer == correctAnswer)){ # 要全TRUE
print("你答對了")
}
if(any(myAnswer == correctAnswer)){ # 只要有一個TRUE
print("裡頭有數字是對的")
}
all(myAnswer == correctAnswer)
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(myAnswer == correctAnswer){
print("你答對了")
}     # 只取用第一個T/F
if(myAnswer == correctAnswer){
print("你答對了")
}
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "true")    # 禁止length>1的logical condition
if(myAnswer == correctAnswer){
print("你答對了")
}
if(myAnswer == correctAnswer){
print("你答對了")
}
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "false")    # 禁止length>1的logical condition
if(myAnswer == correctAnswer){
print("你答對了")
}
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(myAnswer == correctAnswer){
print("你答對了")
}
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "true")    # 禁止length>1的logical condition
if(myAnswer == correctAnswer){
print("你答對了")
}
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "false")
all(myAnswer == correctAnswer)
if(all(myAnswer == correctAnswer)){
print("你答對了")
}
all(myAnswer == correctAnswer)    # logical vector要全為True，all(...)才會產生True。
if(all(myAnswer == correctAnswer)){
print("你答對了")
}
any(myAnswer == correctAnswer)    # logical vector只要有一為True，any(...)就會產生True。
if(any(myAnswer == correctAnswer)){
print("裡頭有數字是對的")
}
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
myAnswer <- c(1,2,3)
correctAnswer <- factor(c(1,2,3))
if(is.factor(myAnswer) && all(myAnswer==correctAnswer)){
print("答對了")
10
} else {
print("答錯了")
0
}
myAnswer <- c(1,2,3)
correctAnswer <- factor(c(1,2,3))
if(is.factor(myAnswer) && all(myAnswer==correctAnswer)){
print("答對了")
10
} else {
print("答錯了")
0
}
if(is.factor(myAnswer) && all(myAnswer==correctAnswer)){
print("答對了")
10
} else {
print("答錯了")
0
}
myAnswer <- c(1,2,3)
correctAnswer <- factor(c(1,2,3))
if(is.factor(myAnswer) && all(myAnswer==correctAnswer)){
print("答對了")
10
} else {
print("答錯了")
0
}
if(is.factor(myAnswer) & all(myAnswer==correctAnswer)){
print("答對了")
10
} else {
print("答錯了")
0
}
myAge <- 40
myChildrenNumber <- 5
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 ||  myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
myAge <- 40
myChildrenNumber <- 5
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 ||  myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
myAge <- 40
myChildrenNumber <- 5
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 || myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
# 兩者結果是一樣的，但用“||”程式會跑比較快，
#   原因是用“||”時，只要碰到某條件為True，就會馬上跳到if的body。
myAge <- 40
myChildrenNumber <- 2
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 || myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
# 兩者結果是一樣的，但用“||”程式會跑比較快，
#   原因是用“||”時，只要碰到某條件為True，就會馬上跳到if的body。
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 || myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
myAge <- 40
myChildrenNumber <- 5
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 || myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
# 兩者結果是一樣的，但用“||”程式會跑比較快，
#   原因是用“||”時，只要碰到某條件為True，就會馬上跳到if的body。
myAge <- c(40, 40)
myChildrenNumber <- c(5, 3)
(myAge >= 65 | myChildrenNumber > 3)
myAge <- c(40, 40)
myChildrenNumber <- c(5, 3)
(myAge >= 65 | myChildrenNumber > 3)
(myAge >= 65 || myChildrenNumber > 3)
myAge <- c(40, 40)
myChildrenNumber <- c(3, 5)
(myAge >= 65 | myChildrenNumber > 3)
(myAge >= 65 || myChildrenNumber > 3)
# 「條件」最好少使用“&”或“|”，因為若兩邊logical向量長度>1，結果也會是個logical向量長度>1。
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
myAge <- 67
myChildrenNumber <- 3
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 || myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
# 兩者結果是一樣的，但用“||”程式會跑比較快，
#   原因是用“||”時，只要碰到某條件為True，就會馬上跳到if的body。
x <- c(2,5,10,-21,3,8)
ifelse(x %% 2==0, "even", "odd")
y <- sample(40:100,20, replace=T)
dplyr::case_when(
y < 60 ~ "F",
60<=y & y < 70 ~"D",
71<=y & y < 80 ~"C",
80<=y & y < 90 ~"B",
90<=y ~ "A"
)
y
y <- sample(40:100,20, replace=T)
y
dplyr::case_when(
y < 60 ~ "F",
60<=y & y < 70 ~"D",
71<=y & y < 80 ~"C",
80<=y & y < 90 ~"B",
90<=y ~ "A"
)
y <- sample(40:100, 20, replace=T)
y
dplyr::case_when(
y < 60 ~ "F",
y >= 60 & y < 70 ~"D",
y >= 70 & y < 80 ~"C",
y >= 80 & y < 90 ~"B",
y >= 90 ~ "A"
)
# 多個條件
y <- sample(40:100, 20, replace=T)
y
dplyr::case_when(
y < 60 ~ "F",
y >= 60 & y < 70 ~"D",
y >= 70 & y < 80 ~"C",
y >= 80 & y < 90 ~"B",
y >= 90 ~ "A"
)
# 多個條件
y <- sample(40:100, 20, replace=T)
y
dplyr::case_when(
y < 60 ~ "5",
y >= 60 & y < 70 ~"6",
y >= 70 & y < 80 ~"7",
y >= 80 & y < 90 ~"8",
y >= 90 ~ "9"
)
y <- sample(60:100, 20, replace=T)
y
# 多個條件
y <- sample(60:100, 20, replace=T)
y
dplyr::case_when(
y < 60 ~ "5",
y >= 60 & y < 70 ~"6",
y >= 70 & y < 80 ~"7",
y >= 80 & y < 90 ~"8",
y >= 90 ~ "9"
)
# 多個條件
y <- sample(40:100, 20, replace=T)
y
dplyr::case_when(
y < 60 ~ "E",    # 0-59產生E
y >= 60 & y < 70 ~"D",    # 60-69產生E
y >= 70 & y < 80 ~"C",    # 70-79產生E
y >= 80 & y < 90 ~"B",    # 80-89產生E
y >= 90 ~ "A"    # 90-100產生E
)
