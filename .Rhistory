example$name[pick_bloodB]
x <- c(1,5,8)
y <- c(5,8)
x %in% y    # x裡的每個元素值是不是屬於y集合
# example裡誰來自大台北
example[c("name", "residence")]
pick_fromTaipeiMetro <- example$residence %in% c("Taipei", "New Taipei")
example$name[pick_fromTaipeiMetro]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 創造可選出來自法商學院的True or False向量
levels(factor(transcript100to103$學院))    # 看資料有哪幾種學院
unique(transcript100to103$學院)    # 看資料有哪幾種學院
pick_lawBusiness <- transcript100to103$學院 %in% c("法學院", "商學院")
# 在 TorF向量 前加上 ! 會成為否定句的 TorF向量
pick_notFromTaipeiMetro <- !pick_fromTaipeiMetro
pick_notFromTaipeiMetro <- !(example$residence %in% c("Taipei", "New Taipei"))
pick_notFromTaipeiMetro
example$name[pick_fromTaipeiMetro]
example$name[pick_notFromTaipeiMetro]
x2 <- c(1, NA, 10)
y2 <- c(-1, NA, 20)
x3 <- c(NA, "小花")
y3 <- c(NA, "小華")
x2
is.na(x2)
print(example[c("name","weight")])
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name","weight")])
choose_na <- is.na(example$weight)
example$name[choose_na]
log(-10)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
head(list_victimAges_female)
head(list_victimAges_female$數目)
View(list_victimAges_female)
is.na(list_victimAges_female$數目)
is.na(list_victimAges_female$數目) -> pick_na
sum(pick_na)
!is.na(list_victimAges_female$數目) -> pick_na
sum(pick_na)    # True=1, False=0
is.na(list_victimAges_female$數目) -> pick_na
sum(pick_na)    # True=1, False=0
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name", "hobby")])
stringr::str_detect(example$hobby, pattern = "美食")
stringr::str_detect(example$hobby, pattern = "美食") -> pick_food
example[pick_food]
example$name[pick_food]
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
typeof(garbageRoutes)
class(garbageRoutes)
garbageRoutes
factor(garbageRoutes)
factor(garbageRoutes$lineName)
garbageRoutes$lineName
View(garbageRoutes)
typeof(garbageRoutes)    # 本質為list
class(garbageRoutes)    # class為data.frame表示它有比list多了許多操作空間
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
typeof(garbageRoutes)    # 本質為list
class(garbageRoutes)    # class為data.frame表示它有比list多了許多操作空間
# 由linename元素判斷垃圾車有幾條路線
garbageRoutes$lineName
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8/json") ->
garbageRoutes
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
typeof(garbageRoutes)    # 本質為list
class(garbageRoutes)    # class為data.frame表示它有比list多了許多操作空間
View(garbageRoutes)
library(stringr)
?str_detect
library(stringr)
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "a$")    # "a$"---"a"結尾
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
str_detect("aecfg", letters)
str_detect(fruit, "a$", negate = T)
str_detect(fruit, "a$")    # "a$"---"a"結尾
str_detect(fruit, "a$", negate = T)
# Also vectorised over pattern
str_detect("aecfg", letters)
# Also vectorised over pattern
str_detect(string = "aecfg", pattern = letters)
# Also vectorised over pattern
str_detect("bbbbc", letters)
str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
str_detect("bbbbc", letters)
# 看不懂說明，貼上範例試試
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")    # 字元規律描述（regular expression）："^a"---以"a"開頭
str_detect(fruit, "a$")    # "a$"---"a"結尾
str_detect(fruit, "a$", negate = T)
!str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
View(CDC_chatbox)
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
View(CDC_chatbox)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei", "New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby, "美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei", "New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example[c("name", "hobby", "type")]
example[c("name", "hobby", "bloodtype")]
example[c("name", "hobby", "bloodType")]
str(example[c("name", "hobby", "bloodType")])
example$name[pick_loveFood & pick_bloodB]
str(example[c("name", "birthday", "residence")])
example$name[pick_after98 | !pick_fromTaipeiMetro]
example$name[pick_after98 | pick_fromTaipeiMetro]
example$name[pick_after98 | !pick_fromTaipeiMetro]
pick_loveFood & pick_bloodB
library(glue)
library(stringr)
library(glue)
str_sub("410873002", 5, 6)
str_sub("410873002", "410552103", 5, 6)
str_sub(
c("410873002", "410552103"), 5, 6
)
library(lubridate)
ymd("民國108年12月5日", "民國98年10月5日")
lubridate::ymd(
c(
"民國2019年12月05日",
"馬丁2019的12課05muydifícil",
"助教2019Emily12解說05真棒",
"2019R12課程05すごい",
"R程式2019的12期中考05とても変態"
)
)
ymd(
c(
"民國2019年12月05日",
"馬丁2019的12課05muydifícil",
"助教2019Emily12解說05真棒",
"2019R12課程05すごい",
"R程式2019的12期中考05とても変態"
)
)
# 地址幾號？只知道號碼在「號」這字前面，但它會是第幾個位置不知道。
# 如何讀入“民國X年X月X日”？
library(lubridate)
ymd("民國108年12月5日", "民國98年10月5日")    # lubridate對年只有西元年的概念
ymd(
c(
"民國2019年12月05日",
"馬丁2019的12課05muydifícil",
"助教2019Emily12解說05真棒",
"2019R12課程05すごい",
"R程式2019的12期中考05とても変態"
)
)
"[:digit:]"
[:digit:]
str_extract_all(
string = c("民國108年12月5日","民國98年10月5日"),
pattern = "(?<=民國)[0-9]{2,3}(?=年)"
)
str_extract(
string = c("民國108年12月5日","民國98年10月5日"),
pattern = "(?<=民國)[0-9]{2,3}(?=年)"
)
str_extract_all(
string = c("民國108年12月5日","民國98年10月5日"),
pattern = "(?<=民國)[0-9]{2, 3}(?=年)"
)
str_extract_all(
string = c("民國108年12月5日","民國98年10月5日"),
pattern = "(?<=民國)[0-9]{2,3}(?=年)"
)
str_extract(
string = c("民國108年12月5日","民國98年10月5日"),
pattern = "(?<=民國)[0-9]{2,3}(?=年)"
)
str_view_all(heartSutra,"色")    # 檢視
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色")    # 檢視
str_count(heartSutra,"色")    # 計數
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色")    # 檢視
str_count(heartSutra,"色")    # 計數
str_view_all(heartSutra,"異色")
studentIds <- c("410873029", "410773005", "410772035", "410562123")
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
studentIds <- c("410873029", "410773005", "410772035", "410562123", "410473108")
str_view_all(studentIds,"(107|108)")
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]")
str_extract(Ids,"[A-Z]")    # 取出 A-Z的字元
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)"    # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1, strip2, strip3)
print(myRegexSlotMachine)
str_view(
c(claimA, claimB, claimC),
pattern = myRegexSlotMachine
)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
str_view(
c(claimA, claimB, claimC),
pattern = myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA, claimB, claimC),
pattern = myRegexSlotMachine
)
str_view(
c(claimA, claimB, claimC),
pattern = myRegexSlotMachine
)
str_view_all(
c(claimA, claimB, claimC),
pattern = myRegexSlotMachine
)
str_view(
c(claimA, claimB, claimC),
pattern = myRegexSlotMachine
)
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
str_view_all(
string = headline, pattern = "謝陳官"
)
str_view_all(
string = headline, pattern = "[謝陳官]"
)
str_view_all(
string = headline, pattern = "謝無雙|官求敗"
)
str_view_all(
string = headline, pattern = "陳[^官]"
)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
jac1 <- jac2 <- jac3 <- "[0-9]"    # 同時產生多個相同的object
jack4 <- "號"
regexStatement <- paste0(jack1, jack2, jack3, jack4)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
# 請使用str_extract()取出每個地址的"xx號"包含"號"字。
jac1 <- jac2 <- jac3 <- "[0-9]"    # 同時產生多個相同的object
jac4 <- "號"
regexStatement <- paste0(jac1, jac2, jac3, jac4)
regexStatement
str_extract(addresses, regexStatement)
str_extract(
addresses,
"[:digit:]+(?=號)"
)
str_extract(
addresses,
"[:digit:]+(?=號)號"
)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
addresses1 <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓'
)
str_extract(
addresses1, pattern = "[0-9]+號"
)
library(readr)
library(stringr)
str_extract(
addresses1, pattern = "[0-9]+號"
)
library(glue)
str_view_all(
addresses1, pattern = "[0-9]+號"
)
str_view_all(
addresses1, pattern = "[0-9]+"
)
phrase <- c("唧唧复唧唧")
pattern_poem <- glue::glue("^{target_regex}")
target_regex <- "唧唧"
pattern_poem <- glue::glue("^{target_regex}")
pattern_poem
str_view(
phrase, pattern_poem
)
str_view(
phrase, pattern_poem1
)
pattern_poem1 <- glue::glue("{target_regex}$")
str_view(
phrase, pattern_poem1
)
twDate <-  c("民國108年12月5日", "民國98年10月5日")
twDate <-  c("民國108年12月5日", "民國98年10月5日")
regex_A = "民國"
regex_B = "年"
glue("(?<={regex_A})[0-9]+(?={regex_B})")
regex_A <- "民國"
regex_B <- "年"
glue("(?<={regex_A})[0-9]+(?={regex_B})")
glue("(?<={regex_A})[0-9]+(?={regex_B})") ->
pattern_year
str_view(
twDate, pattern_year
)
str_extract(
twDate, pattern_year
)
str_extract(
twDate, pattern_year
)
as.integer(
str_extract(
twDate, pattern_year
)
)
as.integer(
str_extract(
twDate, pattern_year
)
) + 1911
as.integer(
str_extract(
twDate, pattern_year
)
) + 1911 ->
yearReplacement
str_replace(
twDate, pattern_year,
replacement = yearReplacement
)
str_replace(
twDate, pattern_year,
replacement = as.character(yearReplacement)
)
str_replace(
twDate, pattern_year,
replacement = as.character(yearReplacement)
) ->
date_1
lubridate::ymd(date_1)
lubridate::ymd(date_1) ->
date_right
date_right
# 民國年月日存成date class
twDate <-  c("民國108年12月5日", "民國98年10月5日")
regex_A <- "民國"
regex_B <- "年"
glue("(?<={regex_A})[0-9]+(?={regex_B})") ->
pattern_year
as.integer(
str_extract(
twDate, pattern_year
)
) + 1911 ->
yearReplacement
str_replace(
twDate, pattern_year,
replacement = as.character(yearReplacement)
) ->
date_1
lubridate::ymd(date_1) ->
date_right
date_right
library(readr)
library(lubridate)
library(stringr)
library(glue)
target_god <- "[:digit:]+"
regex_A <- "民國"
regex_B <- "年"
glue("(?<={regex_A}){target_god}(?={regex_B})") ->
pattern_year
as.integer(
str_extract(
twDate, pattern_year
)
) + 1911 ->
yearReplacement
str_replace(
twDate, pattern_year,
replacement = as.character(yearReplacement)
) ->
date_1
lubridate::ymd(date_1) ->
date_right
date_right
str_extract_all(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+"
)
str_view(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+"
)
str_view_all(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+"
)
str_view_all(
"我的名字8293叫17380小abce明%^",
"[\u4E00-\u9FFF]+"
)
str_view_all(
"我的名字8293叫17380小abce明%^",
"[:graph:]+"
)
str_view_all(
"我的名字8293叫17380小abce明%^",
"[\u4E00-\u9FFF]+"
)
# [\u4E00-\u9FFF]---代表所有中日韓文字字元，不包含英、數、符。
str_view_all(
"我的名字8293叫17380小abce明%^",
"[:graph:]+"
)
