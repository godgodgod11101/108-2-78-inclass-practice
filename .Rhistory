),
message = c(
"Hello! Martin. May I ask some questions? "
)
)
print(commit)
library(jsonlite)
toJSON(commit)
minScore <-
list(
list(
semester = "108-1",
courses1 = list(
name = "個體經濟學",
teacher = "Alice",
grade = 85
),
courses2 = list(
name = "總體經濟學",
teacher = "Mark"
grade = 73
minScore <-
list(
list(
semester = "108-1",
courses1 = list(
name = "個體經濟學",
teacher = "Alice",
grade = 85
),
courses2 = list(
name = "總體經濟學",
teacher = "Mark",
grade = 73
)
),
list(
semester = "108-2",
courses1 = list(
name = "作業研究",
teacher = "Jason",
grade = 90
)
)
)
View(minScore)
View(minScore)
minScore <-
list(
list(
semester = "108-1",
courses1 = list(
name = "個體經濟學",
teacher = "Alice",
grade = 85
),
courses2 = list(
name = "總體經濟學",
teacher = "Mark",
grade = 73
)
),
list(
semester = "108-2",
courses1 = list(
name = "作業研究",
teacher = "Jason",
grade = 90
)
)
)
fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
View(weather_next36hours)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = F, eval=T)
# windows檔名不要有"-"號
vectorEx <- c(2, 6, 7)
listEx <- list(2, 6, 7)
print(vectorEx)
print(listEx)
# 每個元素值可以是不同type的物件值
# 用vector存
minEventVec <- c("2020-03-31T13:40:55Z", "一芳", "2", "水果茶")
print(minEventVec)
# 用list存
minEventList <- list(
ymd_hms("2020-03-31T13:40:55Z"), "一芳", 2, "水果茶"
)
print(minEventList)
# 物件值可以是vector形式，也可以list
c(
c("108學年第1學期", "高級會計學", "高等統計學"),
c("108學年第2學期", "食在拉丁美洲")
)    # 沒用，一樣是單獨一個vector
`小明108學年課表A` <-
list(
c("108學年第1學期", "高級會計學", "高等統計學"),
c("108學年第2學期", "食在拉丁美洲")
)
`小明108學年課表B` <-
list(
list("108學年第1學期", "高級會計學", "高等統計學"),
list("108學年第2學期", "食在拉丁美洲")
)
`小明108學年課表C` <-
list(
list(
"108-1",
c("高級會計學", "高等統計學")
),
list(
"108-2",
c("食在拉丁美洲")
)
)
print(`小明108學年課表B`)
print(`小明108學年課表C`)
# 物件值可以取名
`小明108學年課表D` <-
list(
`上學期` = list(
semester = "108-1",
courses = c("高級會計學", "高等統計學")
),
list(
semester = "108-2",
courses = c("食在拉丁美洲")
)
)
print(`小明108學年課表D`)
commit <- list(
author = list(
name = "Martin",
email = "mtlin@gm.ntpu.edu.tw",
time = ymd_hms("2020-03-25T07:17:40Z")
),
committer = list(
name = "emilyluckey",
email = "emily007@gmail.com",
time = ymd_hms("2020-03-26T08:18:40Z")
),
message = c(
"Hello! Martin. May I ask some questions? "
)
)
print(commit)
View(minEventList)
View(minScore)
save(commit, minScore, file = "class0401.Rda")
save(commit, minScore, file = "class0401.Rda")
load(file = "class0401.Rda")
save(commit, minScore, file = "class0401.Rda")
load(file = "class0401.Rda")
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = F, eval=T)
# windows檔名不要有"-"號
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選：
length(vectorExample)
vectorExample[[1]]
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
View(listExample)
View(listExample)
listExample <-
list(
student="小明",
semester=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
View(listExample)
listExample[[1]]
listExample[[2]]
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
View(tainanSportsMap)
View(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
names(listExample)
listExample$student
listExample$semester$`108-1`
str(listExample)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = F, eval=T)
# windows檔名不要有"-"號
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選？
length(vectorExample)
vectorExample[[1]]
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選？
length(listExample)
listExample[[1]]
listExample[[2]]
# 有什麼名子可以選？
names(listExample)
# 查看原始資料結構
str(listExample)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = F, eval=T)
# windows檔名不要有"-"號
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選？
length(vectorExample)
vectorExample[[1]]
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選？
length(listExample)
listExample[[1]]
listExample[[2]]
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
# 有什麼名子可以選？
names(listExample)
# 查看原始資料結構
str(listExample)
listExample$學期
str(listExample$學期)
listExample$student
listExample$`學期`    # 特殊命名依然要用反頓點呼叫
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = F, eval=T)
# windows檔名不要有"-"號
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選？
length(vectorExample)
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選？
length(vectorExample)
vectorExample[[1]]
listExample <-
list(
student="小明",
semester=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選？
length(listExample)
listExample[[1]]
listExample[[2]]
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
# 有什麼名子可以選？
names(listExample)
# 查看原始資料結構
str(listExample)
str(listExample$`學期`$)
str(listExample$semester)
listExample$semester$`108-1`    # 特殊命名依然要用反頓點呼叫
listExample$student
listExample$semester$`108-1`    # 特殊命名依然要用反頓點呼叫
實也可以用[["名字"]]來選
listExample[["student"]]
# 也可以用[["名字"]]來選
listExample[["student"]]
listExample$student
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002", simplifyDataFrame = F) -> newTaipeiCityVaccine
str(newTaipeiCityVaccine)
str(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
newTaipeiCityVaccine$result
newTaipeiCityVaccine[["result"]]
newTaipeiCityVaccine$result
newTaipeiCityVaccine[["result"]]
newTaipeiCityVaccine[["success"]]
newTaipeiCityVaccine$success
newTaipeiCityVaccine[["success"]]
newTaipeiCityVaccine$success
newTaipeiCityVaccine[[1]]
newTaipeiCityVaccine[["success"]]
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[2]], max.level = 1)
View(newTaipeiCityVaccine)
vectorExample
vectorExample[c(1, 3)]
vectorExample[c(3, 1, 2)]
str(listExample, max.level = 1)
str(listExample[c(1, 2)], max.level = 1)
str(listExample, max.level = 1)
str(listExample[c(1, 2)], max.level = 1)
str(listExample[c(2, 1)], max.level = 1)
str(tainanSportsMap, max.level = 1)
str(tainanSportsMap[c(1, 35, 1006)], max.level = 1)
str(tainanSportsMap[c(1, 35, 1006)])
str(tainanSportsMap[c(1, 35, 1006)], max.level = 2)
str(tainanSportsMap[c(1, 35, 1006)], max.level = 1)
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("學期")]
listExample[c("student","學期")]
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("student", "semester")]
listExample[c("semester", "student")]
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
str(taipeiNightMarkets, max.level = 1)
taipeiNightMarkets[c("寧夏觀光夜市", "饒河街觀光夜市"]
taipeiNightMarkets[c("寧夏觀光夜市", "饒河街觀光夜市")]
listExample[["student"]]
listExample[c("student")]
listExample[["student"]]
listExample[c("student")]
# 顯示到第一層
str(listExample, max.level=1)
listExample[c("student", "semester")]
listExample[c("semester", "student")]
listExample[c("semester", "student")]
vectorExample
vectorExample
vectorExample[c(T,T,F)]    # 要，要，不要
vectorExample[c(TRUE, TRUE, FALSE)]
str(listExample[c(T, F)])
str(listExample[c(T, F)])
str(listExample[c("student")])
str(taipeiNightMarkets, max.level = 1)
names(taipeiNightMarkets)
taipeiNightMarkets[c(T, F, F, F, F, T, F, F, F, F, T, F, F, F, T)]
taipeiNightMarkets[c(T, F, F, F, F, T, F, F, F, F, T, F, F, F, T)] %>%
str(max.level = 1)
library(dplyr)
taipeiNightMarkets[c(T, F, F, F, F, T, F, F, F, F, T, F, F, F, T)] %>%
str(max.level = 1)
library(dplyr)
taipeiNightMarkets[c(T, F, F, F, T, F, F, F, F, T, F, F, F, T)] %>%
str(max.level = 1)
# 用邏輯向量自taipeiNightMarkets選出
# 寧夏觀光夜市、西昌街觀光夜市、大龍街夜市、雙城街夜市。
str(taipeiNightMarkets, max.level = 1)
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
# 用邏輯向量自taipeiNightMarkets選出
# 寧夏觀光夜市、西昌街觀光夜市、大龍街夜市、雙城街夜市。
str(taipeiNightMarkets, max.level = 1)
names(taipeiNightMarkets)
# 用邏輯向量自taipeiNightMarkets選出
# 寧夏觀光夜市、西昌街觀光夜市、大龍街夜市、雙城街夜市。
str(taipeiNightMarkets, max.level = 1)
names(taipeiNightMarkets)
library(dplyr)
taipeiNightMarkets[c(T, F, F, F, T, F, F, F, F, T, F, F, F, T)] %>%
str(max.level = 1)
rep(F, 14)
selectedMarkets <- rep(F, 14)    # repeat函式
print(selectedMarkets)
selectedMarkets[c(1, 5, 10, 14)] <- TRUE    # 取代
print(selectedMarkets)
taipeiNightMarkets[selectedMarkets]
taipeiNightMarkets[selectedMarkets] %>%
str(max.level = 1)
vectorExample[[1]]
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選？
length(vectorExample)
listExample <-
list(
student="小明",
semester=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選？
length(listExample)
str(listExample)
str(listExample, max.level = 3)
get1 <- listExample[c("semester")]
str(get1, max.level = 1)
get1 <- listExample[["semester"]]
str(get1, max.level = 1)
get1 <- listExample[c("semester")]
str(get1, max.level = 1)
get1 <- listExample[c("semester")]
str(get1, max.level = 2)
get1 <- listExample[["semester"]]
str(get1, max.level = 1)
get2 <- listExample[c("semester")]
str(get2, max.level = 2)
str(get1, max.level = 1)
str(get2, max.level = 2)
str(get1, max.level = 1)
str(get2, max.level = 1)
get2 <- listExample[c("semester")]
str(get2, max.level = 1)
str(get2, max.level = 2)
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
select1 <- numVector[c(1,4)]
select1
# 用 ; 斷行
select1 <- numVector[c(1,4)]
select1
select1 <- numVector[c(1,4)]; select1
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
