)
today2[[1]]$highest_temp
a <- c("1", "b", "TRUE")
a
a[[2]] <- "c"    # 元素存在，替換
a
a[[4]] <- "7"    # 元素不存在，增加
a
a[c(5,6)] <- c("J", "K")
a
a[[7]] <- "Johnson"
a
a <- c(a, "Mary")
a
a <- c(a, "Mary")
a
a <- c(a, "Mary")
a
# 元素提取[.],[[.]],$.也可用來進行元素「值」的修改與新增
# obj[.] <- value
# obj[[.]] <- value
# obj$. <- value
a <- c("1", "b", "TRUE")
a
a[[2]] <- "c"    # 元素存在，替換
a
a[[4]] <- "7"    # 元素不存在，增加
a
a[c(5,6)] <- c("J", "K")
a
a[[7]] <- "Johnson"
a
a <- c(a, "Mary")
a
a <- c(a, "Mary")
a
library(lubridate)
list1 <-
list(
list(
name = "Jack",
birthday = ymd("1998-03-21"),
status = c(height=177, weight=80)
)
)
str(list1)
# 更改日期
list1[[1]]$birthday <- ymd("19930608")
str(list1)
# 新增資料
list1[[2]] <-
list(
name = "Mary",
birthday = ymd("19930408")
)
str(list1)
str(list1)
list1[[1]][["age"]] <- 25
list1
str(list1)
list[[2]]["age"]
list[[2]]["name"]
list[[2]]
list[[1]]
list1[[2]]
list1[[2]]["name"]
list1[[2]]["age"] <- 25
str(list1)
View(list1)
list1[[2]]["age"] <- list(23)
str(list1)
# 由於[.]會保留母層結構，所以 <- 右側要使用和母層相同的型態設定：
#   母層若為list，則需用list(...)方式增加。
#   母層若為atomic vector，則用c(...)方式增加。
str(list1)
list1[[1]][["age"]] <- 25
list1[[2]]["age"] <- list(23)
str(list1)
# 改變「一個」元素時，使用[[ ]]比較不會錯。
library(lubridate)
list1 <-
list(
list(
name = "Jack",
birthday = ymd("1998-03-21"),
status = c(height=177, weight=80)
)
)
str(list1)
# 更改日期
list1[[1]]$birthday <- ymd("19930608")
str(list1)
# 新增資料
list1[[2]] <-
list(
name = "Mary",
birthday = ymd("19930408")
)
str(list1)
# 由於[.]會保留母層結構，所以 <- 右側要使用和母層相同的型態設定：
#   母層若為list，則需用list(...)方式增加。
#   母層若為atomic vector，則用c(...)方式增加。
str(list1)
list1[[1]][["age"]] <- 25
list1[[2]]["age"] <- list(23)
str(list1)
# 改變「一個」元素時，使用[[ ]]比較不會錯。
# 由於[.]會保留母層結構，所以 <- 右側要使用和母層相同的型態設定：
#   母層若為list，則需用list(...)方式增加。
#   母層若為atomic vector，則用c(...)方式增加。
str(list1)
list1[[1]][["age"]] <- 25
list1[[2]]["age"] <- list(23)
str(list1)
# 改變「一個」元素時，使用[[ ]]比較不會錯。
View(list1)
# 給Jack增加兩個元素
list1[[1]][c("bloodType", "registered")] <- list("AB", T)
str(list1)
a
# 元素提取[.],[[.]],$.也可用來進行元素「值」的修改與新增
# obj[.] <- value
# obj[[.]] <- value
# obj$. <- value
a <- c("1", "b", "TRUE")
a
a[[2]] <- "c"    # 元素存在，替換
a
a[[4]] <- "7"    # 元素不存在，增加
a
a[c(5,6)] <- c("J", "K")
a
# 增加一個 Johnson ，使用 [[.]] <- 。
a[[7]] <- "Johnson"
a
# 使用前一章的向量疊代（recursive vector concatenate）法，新增一個 Mary 。
a <- c(a, "Mary")
a
a
print(a)
a[-c(1, 3)]
a[-2]
a[c(-2)]
list1[[1]]
list1[[1]][[-"name"]]
list1[[1]][-"name"]
"name"
list1[[1]][-c("name")]
View(list1)
list1[[1]][["name"]]
list1[[1]][[-"name"]]
list1[[1]][c("name")]
list1[[1]][-c("name")]
print(a)
a[-c(1, 3)]
a[c(-2)]
str(list1)
library(lubridate)
list1 <-
list(
list(
name = "Jack",
birthday = ymd("1998-03-21"),
status = c(height=177, weight=80)
),
list(
name = "Mary",
birthday = ymd("1998-08-24"),
status = c(height=163, weight=45),
age = 21,
bloodType = "AB"
)
)
str(list1)
list1[[1]][-3]
# 刪除Jack的status
list1[[1]][-3] -> list1[[1]]
str(list1)
# 刪除Mary的status, blookType
list1[[2]][-c(3, 5)] <- list1[[2]]
str(list1)
# 刪除Mary的status, blookType
list1[[2]][-c(3, 5)] <- list1[[2]]
str(list1)
list1[[2]]
list1[[2]][-c(3)]
list1[[2]][-c(3, 5)]
# 刪除Mary的status, blookType
list1[[2]][-c(3, 5)] -> list1[[2]]
str(list1)
str(list1)
# list元素要刪除時也可以用 [.] <-NULL 、 [[.]] <- NULL
str(list1)
list1[[2]][c(1, 2)] <- NULL
str(list1)
str(list1)
jsonlite::fromJSON("https://api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits", simplifyDataFrame = F)
jsonlite::fromJSON("https://api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits", simplifyDataFrame = F) -> githubCommit
str(githubCommit)
str(githubCommit, max.level = 2)
githubCommit[[3]][["commit"]][["committer"]]
githubCommit[[3]][["commit"]][["committer"]][-c(2)]
# 刪掉email
githubCommit[[3]][["commit"]][["committer"]][-c(2)] ->
githubCommit[[3]][["commit"]][["committer"]]
githubCommit[[3]][["commit"]][["committer"]]
githubCommit[[1]][["commit"]][["committer"]]
githubCommit[[1]][["commit"]][["committer"]]$email <- NULL
githubCommit[[1]][["commit"]][["committer"]]
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = F, eval=T)
# windows檔名不要有"-"號
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a+b
a-b
a*b
a/b
a %% b    # 餘數
a ** b
a^b    # 次方
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
print(sequenceNums)
sequenceNums %% 2 # 餘數為1則是奇數，0則是偶數
# 奇、偶判斷
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums %% 2    # 餘數為1則是奇數，0則是偶數
5 * c(1, 3, 4) + 7
5 * c(1, 3, 4) + 7
# 等於
c(5,5,5) * c(1,3,4) + c(7,7,7)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
# 等於
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
# 等於
c(2,3,2)/c(-2,-13,10)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
# 等於
c(2,3,2)/c(-2,-13,10)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
a <- c(2, 3, 5)
b <- c(4,-1, 3)
# elementwise operation
a+b
a-b
a*b
a/b
a %% b    # 餘數
a ** b
a^b    # 次方
# 奇、偶判斷
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums %% 2    # 餘數為1則是奇數，0則是偶數
5 * c(1, 3, 4) + 7
# 等於
c(5,5,5) * c(1,3,4) + c(7,7,7)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
# 等於
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
# 等於
c(2,3,2)/c(-2,-13,10)
library(knitr)
opts_chunk$set(echo = TRUE, message = T, warning = T, eval=T)
# windows檔名不要有"-"號
a <- c(2, 3, 5)
b <- c(4,-1, 3)
# elementwise operation
a+b
a-b
a*b
a/b
a %% b    # 餘數
a ** b
a^b    # 次方
# 奇、偶判斷
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums %% 2    # 餘數為1則是奇數，0則是偶數
5 * c(1, 3, 4) + 7
# 等於
c(5,5,5) * c(1,3,4) + c(7,7,7)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
# 等於
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
# 等於
c(2,3,2)/c(-2,-13,10)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
# 等於
c(2,3,2)/c(-2,-13,10)
#rRecycle不只用在數值class
paste0(
c("我叫"), c("小明","小美")
)
#rRecycle不只用在數值class
paste0(
c("我叫"), c("小明","小美")
)
# 等於
paste0(
c("我叫","我叫"), c("小明","小美")
)
paste0(
c("他叫","我叫"), c("小明","小美","大雄")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example[c("name", "height")])
example$name[c(T, F, T, F)]
example$height >= 170
# example裡誰的身高大於等於170
example$name[c(T, F, T, F)]    # 爛方法
example$height >= 170 -> pickAbove170
example$name[pickAbove170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
View(transcript100to103)
View(transcript100to103)
table(transcript100to103)
table(transcript100to103$學屆)
View(transcript100to103)
table(transcript100to103)    #
table(transcript100to103$學屆)    #
View(transcript100to103)
table(transcript100to103$年級)    #
table(transcript100to103$學屆)    #
# 選成績大於85分
transcript100to103$成績 > 85 -> pickAbove85
table(transcript100to103$學屆[pickAbove85])
View(example)
example$birthday
View(example)
example$birthday %>%
class
# example裡誰1998年(含)以後出生
example$birthday
class(example$birthday)
typeof(example$birthday)
View(example)
print(example[c("name", "birthday")])
example$birthday >= lubridate::ymd("19980101")
example$birthday >= lubridate::ymd("19980101") ->
pickAfter98
# example裡誰1998年（含）以後出生
print(example[c("name", "birthday")])
example$birthday >= lubridate::ymd("19980101") ->
pickAfter98
example$name[pickAfter98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
View(exchangeRate)
exchangeRate$期間 >= lubridate::ymd("19980101")
exchangeRate$期間 >= lubridate::ymd("19980101") ->
pickAfter1998
str(exchangeRate)
# 選出1998年1月（含）以後的匯率資料
exchangeRate$期間 >= lubridate::ymd("19980101") ->
pickAfter1998
list(
`期間` = exchangeRate$期間[pickAfter1998],
`幣別` = exchangeRate$期間[pickAfter1998],
`匯率` = exchangeRate$期間[pickAfter1998]
)
list(
`期間` = exchangeRate$期間[pickAfter1998],
`幣別` = exchangeRate$期間[pickAfter1998],
`匯率` = exchangeRate$期間[pickAfter1998]
) ->
exchangeRate_after1998
View(exchangeRate_after1998)
# 選出1998年1月（含）以後的匯率資料
exchangeRate$期間 >= lubridate::ymd("19980101") ->
pickAfter1998
list(
`期間` = exchangeRate$期間[pickAfter1998],
`幣別` = exchangeRate$幣別[pickAfter1998],
`匯率` = exchangeRate$匯率[pickAfter1998]
) ->
exchangeRate_after1998
View(exchangeRate_after1998)
View(exchangeRate)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
a <- c(2, 3, 5)
b <- c(4,-1, 3)
# elementwise operation
a+b
a-b
a*b
a/b
a %% b    # 餘數
a ** b
a^b    # 次方
# 奇、偶判斷
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums %% 2    # 餘數為1則是奇數，0則是偶數
5 * c(1, 3, 4) + 7
# 等於
c(5,5,5) * c(1,3,4) + c(7,7,7)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
# 等於
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
# 等於
c(2,3,2)/c(-2,-13,10)
#rRecycle不只用在數值class
paste0(
c("我叫"), c("小明","小美")
)
# 等於
paste0(
c("我叫","我叫"), c("小明","小美")
)
paste0(
c("他叫","我叫"), c("小明","小美","大雄")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example[c("name", "height")])
# example裡誰的身高大於等於170
example$name[c(T, F, T, F)]    # 爛方法
example$height >= 170 -> pickAbove170
example$name[pickAbove170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 各學屆二年級人數
table(transcript100to103$學屆)    # 分類數次數
# 選成績大於85分
transcript100to103$成績 > 85 -> pickAbove85
table(transcript100to103$學屆[pickAbove85])
example$birthday
class(example$birthday)
typeof(example$birthday)
# example裡誰1998年（含）以後出生
print(example[c("name", "birthday")])
example$birthday >= lubridate::ymd("19980101") ->
pickAfter98
example$name[pickAfter98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
# 選出1998年1月（含）以後的匯率資料
exchangeRate$期間 >= lubridate::ymd("19980101") ->
pickAfter1998
list(
`期間` = exchangeRate$期間[pickAfter1998],
`幣別` = exchangeRate$幣別[pickAfter1998],
`匯率` = exchangeRate$匯率[pickAfter1998]
) ->
exchangeRate_after1998
print(example[c("name", "allowance")])
class(example$allowance)
example$allowance
example$allowance >= "1001-2000"
#example$allowance >= "1001-2000"    # not ordered factor
class(example$allowance)
example$allowance <-
ordered(
example$allowance
)
class(example$allowance)
example$allowance >= "1001-2000"
example$allowance >= "1001-2000" ->
pickOver1000
example$name[pickOver1000]
# 也可以在設factor時直接設好ordered
factor(
c("0-1000", "1001-2000", "2000+", "1001-2000"),
levels = c("0-1000", "1001-2000", "2000+"),
ordered = T    # 設定為可排序的factor
)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female)
View(list_victimAges_female)
list_victimAges_female[["數目"]]
View(list_victimAges_female$數目)
View(list_victimAges_female$年齡層)
