weight = c(77, NA, 60, 43),
birthday = lubridate::ymd(c("1998-03-11", "1999-12-22", "1995-08-22", "2001-10-10")),
hobby = c("美食 旅遊", "旅遊 時尚", "3C 美食", "音樂 旅遊"),
residence = c("Taipei", "New Taipei", "Taichung", "Kaohsiung"),
allowance = factor(c("0-1000", "1001-2000", "2000+", "1001-2000")),
bloodType = c("A", "B", "B", "O")
)
example$name == "小新"
example$name == "小新" -> pick_小新
pick_小新
example[[1]]
example[[1]][pick_小新]
data_小新 <- list(
example[[1]][pick_小新],
example[[2]][pick_小新],
example[[3]][pick_小新],
example[[4]][pick_小新],
example[[5]][pick_小新],
example[[6]][pick_小新],
example[[7]][pick_小新]
)
View(example)
View(data_小新)
data_小新 <- list(
name = example[[1]][pick_小新],
height = example[[2]][pick_小新],
weight = example[[3]][pick_小新],
birthday = example[[4]][pick_小新],
hobby = example[[5]][pick_小新],
residence = example[[6]][pick_小新],
allowance = example[[7]][pick_小新],
bloodType = example[[8]][pick_小新]
)
View(data_小新)
example <- list(
name = c("小明", "小花", "小新", "美美"),
height = c(175, 166, 170, 160),
weight = c(77, NA, 60, 43),
birthday = lubridate::ymd(c("1998-03-11", "1999-12-22", "1995-08-22", "2001-10-10")),
hobby = c("美食 旅遊", "旅遊 時尚", "3C 美食", "音樂 旅遊"),
residence = c("Taipei", "New Taipei", "Taichung", "Kaohsiung"),
allowance = factor(c("0-1000", "1001-2000", "2000+", "1001-2000")),
bloodType = c("A", "B", "B", "O")
)
example$name == "小新" -> pick_student3
data_student3 <- list(
name = example[[1]][pick_student3],
height = example[[2]][pick_student3],
weight = example[[3]][pick_student3],
birthday = example[[4]][pick_student3],
hobby = example[[5]][pick_student3],
residence = example[[6]][pick_student3],
allowance = example[[7]][pick_student3],
bloodType = example[[8]][pick_student3]
)
View(example)
View(data_student3)
data_student3[["allowance"]]
map(example, ~.x[pick_student3])
data_student3 <- map(example, ~.x[pick_student3])
View(data_student3)
dance <- jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1",
simplifyDataFrame = F)
View(dance)
dance[[1]]$title
map(dance, ~.x$title)
list_danceTitle <- map(dance, ~.x$title)
list_danceTitle <- map(dance, ~.x$title)
dance <- jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1",
simplifyDataFrame = F)
list_danceTitle <- map(dance, ~.x$title)
View(list_danceTitle)
View(dance)
View(list_danceTitle)
View(dance)
dance <- jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F)
# 取出所有表演的名稱
list_danceTitle <- map(dance, ~.x$title)
View(list_danceTitle)
View(dance)
dance[[4]]$showInfo
length(dance[[4]]$showInfo)
map(dance, ~length(.x$showInfo))
list_numOfShow <- map(dance, ~length(.x$showInfo))
View(list_numOfShow)
str(dance[[4]])
str(dance[[4]]$showInfo)
dance[[4]]$showInfo
str(dance[[4]]$showInfo)
View(list_numOfShow)
View(dance)
dance[[4]]$showInfo[[1]]$time
dance[[4]]$showInfo[[2]]$time
map(dance[[4]]$showInfo, ~.x$time)
list_dance4_showTime <- map(dance[[4]]$showInfo, ~.x$time)
View(list_dance4_showTime)
num <- c(2, 5, 7, 1, 3)
num[[1]]+3
num[[1]]+3
num[[2]]+3
num[[5]]+3
num[[2]]+3
num[[5]]+3
map(num, ~.x+3)
# map()也可以用在vector
num <- c(2, 5, 7, 1, 3)
num[[1]]+3
num[[2]]+3
num[[5]]+3
map(num, ~.x+3)
chr <- c("abaa", "accd")
str_extract(chr, "[ad]")
str_extract_all(chr, "[ad]")
str_extract_all(chr[[1]], "[ad]")
str_extract_all(chr[[2]], "[ad]")
map(chr, ~ str_extract_all(.x, "[ad]"))
chr <- c("abaa", "accd")
str_extract_all(chr[[1]], "[ad]")
str_extract_all(chr[[2]], "[ad]")
map(chr, ~ str_extract_all(.x, "[ad]"))
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(purrr)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
library(readr)
library(lubridate)
library(stringr)
library(glue)
library(purrr)
threeHeigths <- c(Gary=178, John=182, Cam=175)
sort(threeHeigths, decreasing = T) ->
sorted_heights
names(sorted_heights)
threeHeigths <- c(Gary=178, John=182, Cam=175)
sort(threeHeigths, decreasing = T) ->
sorted_heights1
names(sorted_heights) -> sorted_heights2
names(sorted_heights1) -> sorted_heights2
sorted_heights2[[1]]
# 法2
names(sort(threeHeigths, decreasing = T))[[1]]
library(magrittr)
threeHeigths
threeHeigths %>%
sort(decreasing = T) %>%
names()
threeHeigths %>%
sort(decreasing = T) %>%
names()[[1]]
threeHeigths %>%
sort(decreasing = T) %>%
names() %>%
[[1]]
threeHeigths %>%
sort(., decreasing = T) %>%
names(.) %>%
.[[1]]
threeHeigths %>%
sort(decreasing = T) %>%
names() %>%
.[[1]]
threeHeigths %>%
sort(decreasing = T) %>%
names() %>%
.[[1]]
# 用.代表前面物件
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
cities %>%
levels()
cities %>%
levels() %>%
str_replace(pattern = "台北", "北部")
cities %>%
levels() %>%
str_replace(pattern = "台北", "北部") %>%
str_replace(pattern = "花蓮|台東", "東部")
cities %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部")
regions <- cities
regions %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部") ->
levels(regions)
regions
regions <- cities
regions %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部") ->
levels(regions)
regions
regions %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部") ->
levels(regions)
regions
regions <- cities
regions %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部") ->
levels(regions)
regions
regions <- cities
regions %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部") ->
levels(regions)
regions
regions <- cities
regions %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部") ->
levels(regions)
regions
regions %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部") %>%
. ->
levels(regions)
regions %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部") ->
levels(regions)
regions
# 由cities創出每個元素對應的地區（regions）
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
regions <- cities
regions %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部") ->
levels(regions)
regions
num <- c(2,97,22,15,7)
# 選出大於50的數字
(num > 50) -> pick_big
num[pick_big]
# pipe expression
(num > 50) %>%
num[.]
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 找出身高最高的人
# 法1
sort(threeHeigths, decreasing = T) ->
sorted_heights1
names(sorted_heights1) -> sorted_heights2
sorted_heights2[[1]]
# 缺點：太多瑣碎物件
# 法2
names(sort(threeHeigths, decreasing = T))[[1]]
# 缺點：難懂
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]]
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]]
threeHeights %>%
sort(decreasing = T) %>%
names() %>%
.[[1]]
threeHeights <- c(Gary=178, John=182, Cam=175)
threeHeights <- c(Gary=178, John=182, Cam=175)
# 找出身高最高的人
# 法1
sort(threeHeights, decreasing = T) ->
sorted_heights1
names(sorted_heights1) -> sorted_heights2
sorted_heights2[[1]]
# 缺點：太多瑣碎物件
# 法2
names(sort(threeHeights, decreasing = T))[[1]]
# 缺點：難懂
library(magrittr)    # pipe operation
threeHeights %>%
sort(decreasing = T) %>%
names() %>%
.[[1]]
# 用.代表前面物件
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]]
threeHeights %>%
sort(., decreasing=T) %>%
names(.) %>%
.[[1]] ->
heightestPerson
# 等於
heightestPerson <-
threeHeights %>%
sort(., decreasing=T) %>%
names(.) %>%
.[[1]]
threeHeights <- c(Gary=178, John=182, Cam=175)
# 等於
heightestPerson <-
threeHeights %>%
sort(., decreasing=T) %>%
names(.) %>%
.[[1]]
# 由cities創出每個元素對應的地區（regions）
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
cities %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部")
# 等於
cities %>%
levels() %>%
str_replace(pattern = "台北", "北部") %>%
str_replace(pattern = "花蓮|台東", "東部") %>%
str_replace(pattern = "台中", "中部")
cities %>%
levels(.) %>%
str_replace(., pattern = "台北", "北部") %>%
str_replace(., pattern = "花蓮|台東", "東部") %>%
str_replace(., pattern = "台中", "中部")
# 等於
cities %>%
levels() %>%
str_replace(pattern = "台北", "北部") %>%
str_replace(pattern = "花蓮|台東", "東部") %>%
str_replace(pattern = "台中", "中部")
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 原始作法
names(sort(population)) -> setLevels
factor(cities, levels = setLevels) -> cities
# pipe expression (wrong)
population %>%
names(sort(.)) %>%
factor(cities, levels = .)
# pipe expression
population %>%
names(.) %>%
sort(.)
# pipe expression
population %>%
sort(.) %>%
names(.)
# pipe expression
population %>%
sort(.) %>%
names(.) %>%
factor(cities, levels = .)
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 原始作法
names(sort(population)) -> setLevels
factor(cities, levels = setLevels)
# pipe expression
population %>%
sort(.) %>%
names(.) %>%
factor(cities, levels = .)
# 要小心 %>% 是將左邊output放到右邊函數，右邊函數指的是最外圍的函數
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 原始作法
names(sort(population)) -> setLevels
factor(cities, levels = setLevels)
# pipe expression (wrong)
# population %>%
#   names(sort(.)) %>%
#   factor(cities, levels = .)
# pipe expression
population %>%
sort(.) %>%
names(.) %>%
factor(cities, levels = .)
library(readr)
library(lubridate)
library(stringr)
library(glue)
library(purrr)
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
purrr::map(dataList, ~is.numeric(.x))
purrr::map(dataList, is.numeric)
purrr::map(dataList, ~is.numeric(.x)) -> pick_numeric
pick_numeric
unlist(pick_numeric) -> pick_numericV
dataList[pick_numericV]
dataList[pick_numericV] > 50
dataList[pick_numericV]$num > 50
dataList[pick_numericV]$num > 50 -> pick_big    # list無法比大小
dataList[pick_numericV]$num[pick_big]
# 找出dataList中元素class為numeric裡那些大於50的數字
purrr::map(dataList, ~is.numeric(.x)) -> pick_numeric
purrr::map(dataList, is.numeric)    # 省略寫法
unlist(pick_numeric) -> pick_numericV    # unlist()：分解list成為named vector
dataList[pick_numericV]$num > 50 -> pick_big    # list無法比大小
dataList[pick_numericV]$num[pick_big]
dataList %>%
map(~ is.numeric(.x))
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.)
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.][[1]]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.][[1]]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.]$num
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
.[[1]]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
.[[1]] > 50
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
(.[[1]] > 50)
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
.[[1]] > 50
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
(.[[1]] > 50)
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
{(.[[1]] > 50)}
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.] %>%
{(.[[1]] > 50)} -> pick_big
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
dataList[.][[1]][pick_big]
dataList %>%
map(., ~ is.numeric(.x)) %>%
unlist(.) %>%
{dataList[.][[1]][pick_big]}
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# pipe expression (wrong)
population %>%
names(sort(.)) %>%
factor(cities, levels = .)
# pipe expression (wrong)
population %>%
{names(sort(.))} %>%
factor(cities, levels = .)
