poem_new
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
poem_song[poem_songOrder] ->
poem_song
# poem_song
poem_song[136] <-
poem_new
# poem_song
View(poem_song)
poem_song[136] <-
list(poem_new)
# poem_song
View(poem_song)
View(poem_new)
poem_song[22]
View(poem_song)
poem_song[22][4]
poem_song[[22]]
poem_song[22]
poem_song[22]$paragraphs
View(poem_song)
poem_song[[136]] <-
list(poem_new)
# poem_song
View(poem_song)
poem_song[136] <-
list(poem_new)
View(poem_song)
poem_song[22]]
poem_song[[22]]
poem_song[[22]]$paragraphs
poem_song[[22]]$paragraphs[[4]]
poem_song[[22]]$paragraphs[[4]] <-
"喜聞何力語，應爲樂秋豐。"
# poem_song
View(poem_song)
poem_song[[22]]
install.packages(rvest)
install.packages("rvest")
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
str(post)
post$comments$gender
as.factor(post$comments$gender)
post$comments$hearts
str(post)
post$comments$gender <- as.factor(post$comments$gender)
post$comments$hearts <- as.integer(post$comments$hearts)
# post
View(post)
a <- "我叫"
b <- c("小明","阿美")
paste0(a,b)
View(post)
post$comments$DateTime
ymd(post$comments$DateTime, tz = "Asia/Taipei")
# post
post$comments$DateTime
mdy_hm(post$comments$DateTime, tz = "Asia/Taipei")
md_hm(post$comments$DateTime, tz = "Asia/Taipei")
View(post)
post$comments$DateTime
as.POSIXct(post$comments$DateTime)
post$comments$DateTime
View(post)
View(post)
post$category_dateTime
post$category_dateTime[[2]]
as.character.Date(post$category_dateTime[[2]])
as.character.Date(post$category_dateTime[[2]])
as.character.Date(post$category_dateTime[[2]])
class(as.character.Date(post$category_dateTime[[2]]))
class(as.Date.default(post$category_dateTime[[2]]))
class(as_datetime(post$category_dateTime[[2]]))
as_datetime(post$category_dateTime[[2]])
paste0(
post$category_dateTime[[2]]
)
post$content
View(post)
paste0(
"2020", post$category_dateTime[[2]]
)
View(post)
View(post)
post$comments$gender
post$comments$gender
post$comments$DateTime
post$comments$content
post$comments$hearts
# post
post$comments$gender[[1]]
post$comments$DateTime[[1]]
post$comments$content[[1]]
post$comments$hearts[[1]]
# post
post$comments$gender[[26]]
as.numeric(post$category_dateTime[[2]])
View(post)
list(
post$title,
post$content,
post$submitter_gender,
post$category_dateTime[[1]]
)
list(
title = post$title,
content = post$content,
submitter_gender = post$submitter_gender,
category = post$category_dateTime[[1]]
)
# post
list(
title = post$title,
content = post$content,
submitter_gender = post$submitter_gender,
category = post$category_dateTime[[1]],
dateTime = post$category_dateTime[[2]]
)
# post
list(
title = post$title,
content = post$content,
submitter_gender = post$submitter_gender,
category = post$category_dateTime[[1]],
dateTime = post$category_dateTime[[2]],
comments = post$comments
)
# post
list(
title = post$title,
content = post$content,
submitter_gender = post$submitter_gender,
category = post$category_dateTime[[1]],
dateTime = post$category_dateTime[[2]],
comments = post$comments
) ->
jack
View(jack)
paste0(
"2020", post$category_dateTime[[2]], "00"
)
paste0(
"2020", post$category_dateTime[[2]], ":00"
)
paste0(
"2020", post$category_dateTime[[2]], ":00"
)
library(dplyr)
paste0(
"2020", post$category_dateTime[[2]], ":00"
) %>%
ymd_hms()
paste0(
"2020年",post$comments$DateTime
) %>%
ymd_hms()
paste0(
"2020年",post$comments$DateTime
) %>%
ymd_hm()
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
a <- c(2, 3, 5)
b <- c(4,-1, 3)
# elementwise operation
a+b
a-b
a*b
a/b
a %% b    # 餘數
a ** b
a^b    # 次方
# 奇、偶判斷
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums %% 2    # 餘數為1則是奇數，0則是偶數
5 * c(1, 3, 4) + 7
# 等於
c(5,5,5) * c(1,3,4) + c(7,7,7)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
# 等於
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
# 等於
c(2,3,2)/c(-2,-13,10)
#rRecycle不只用在數值class
paste0(
c("我叫"), c("小明","小美")
)
# 等於
paste0(
c("我叫","我叫"), c("小明","小美")
)
paste0(
c("他叫","我叫"), c("小明","小美","大雄")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example[c("name", "height")])
# example裡誰的身高大於等於170
example$name[c(T, F, T, F)]    # 爛方法
example$height >= 170 -> pickAbove170
example$name[pickAbove170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 各學屆二年級人數
table(transcript100to103$學屆)    # 分類數次數
# 選成績大於85分
transcript100to103$成績 > 85 -> pickAbove85
table(transcript100to103$學屆[pickAbove85])
example$birthday
class(example$birthday)
typeof(example$birthday)
# example裡誰1998年（含）以後出生
print(example[c("name", "birthday")])
example$birthday >= lubridate::ymd("19980101") ->
pickAfter98
example$name[pickAfter98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
# 選出1998年1月（含）以後的匯率資料
exchangeRate$期間 >= lubridate::ymd("19980101") ->
pickAfter1998
list(
`期間` = exchangeRate$期間[pickAfter1998],
`幣別` = exchangeRate$幣別[pickAfter1998],
`匯率` = exchangeRate$匯率[pickAfter1998]
) ->
exchangeRate_after1998
print(example[c("name", "allowance")])
# example裡誰零用錢大於1000
#example$allowance >= "1001-2000"    # not ordered factor
class(example$allowance)
example$allowance <-
ordered(
example$allowance
)
class(example$allowance)
example$allowance >= "1001-2000" ->
pickOver1000
example$name[pickOver1000]
# 也可以在設factor時直接設好ordered
factor(
c("0-1000", "1001-2000", "2000+", "1001-2000"),
levels = c("0-1000", "1001-2000", "2000+"),
ordered = T    # 設定為可排序的factor
)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female)
View(list_victimAges_female$年齡層)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example[c("name", "bloodType")]
print(example[c("name", "bloodType")])
print(example[c("name", "bloodType")])
# example裡誰血型B型
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_even <- sequenceNums %% 2 == 0
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
# 取出偶數
pick_even <- sequenceNums %% 2 == 0
sequenceNums[pick_even]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
# 取出偶數
pick_even <- (sequenceNums %% 2) == 0
sequenceNums[pick_even]
sequenceNums %% 2
x <- c(1,5,8)
y <- c(5,8)
x %in% y    # x裡的元素值是不是屬於y集合
example$residence
example[c("name", "residence")]
# example裡誰來自大台北
example[c("name", "residence")]
pick_fromTaipeiMetro <- example$residence %in% c("Taipei", "New Taipei")
example[pick_fromTaipeiMetro]
# example裡誰來自大台北
example[c("name", "residence")]
pick_fromTaipeiMetro <- example$residence %in% c("Taipei", "New Taipei")
example$name[pick_fromTaipeiMetro]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
View(transcript100to103)
transcript100to103$學院
factor(transcript100to103$學院)
# 創造可選出來自法商學院的True or False向量
levels(factor(transcript100to103$學院))
unique(transcript100to103$學院)
# 創造可選出來自法商學院的True or False向量
levels(factor(transcript100to103$學院))    # 看資料有哪幾種學院
unique(transcript100to103$學院)    # 看資料有哪幾種學院
transcript100to103$學院 %in% c("法學院", "商學院")
# 創造可選出來自法商學院的True or False向量
levels(factor(transcript100to103$學院))    # 看資料有哪幾種學院
unique(transcript100to103$學院)    # 看資料有哪幾種學院
pick_lawBusiness <- transcript100to103$學院 %in% c("法學院", "商學院")
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
a <- c(2, 3, 5)
b <- c(4,-1, 3)
# elementwise operation
a+b
a-b
a*b
a/b
a %% b    # 餘數
a ** b
a^b    # 次方
# 奇、偶判斷
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums %% 2    # 餘數為1則是奇數，0則是偶數
5 * c(1, 3, 4) + 7
# 等於
c(5,5,5) * c(1,3,4) + c(7,7,7)
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
# 等於
c(2,3,2,3)/c(-2,-13,10,22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
# 等於
c(2,3,2)/c(-2,-13,10)
#rRecycle不只用在數值class
paste0(
c("我叫"), c("小明","小美")
)
# 等於
paste0(
c("我叫","我叫"), c("小明","小美")
)
paste0(
c("他叫","我叫"), c("小明","小美","大雄")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example[c("name", "height")])
# example裡誰的身高大於等於170
example$name[c(T, F, T, F)]    # 爛方法
example$height >= 170 -> pickAbove170
example$name[pickAbove170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 各學屆二年級人數
table(transcript100to103$學屆)    # 分類數次數
# 選成績大於85分
transcript100to103$成績 > 85 -> pickAbove85
table(transcript100to103$學屆[pickAbove85])
example$birthday
class(example$birthday)
typeof(example$birthday)
# example裡誰1998年（含）以後出生
print(example[c("name", "birthday")])
example$birthday >= lubridate::ymd("19980101") ->
pickAfter98
example$name[pickAfter98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
# 選出1998年1月（含）以後的匯率資料
exchangeRate$期間 >= lubridate::ymd("19980101") ->
pickAfter1998
list(
`期間` = exchangeRate$期間[pickAfter1998],
`幣別` = exchangeRate$幣別[pickAfter1998],
`匯率` = exchangeRate$匯率[pickAfter1998]
) ->
exchangeRate_after1998
print(example[c("name", "allowance")])
# example裡誰零用錢大於1000
#example$allowance >= "1001-2000"    # not ordered factor
class(example$allowance)
example$allowance <-
ordered(
example$allowance
)
class(example$allowance)
example$allowance >= "1001-2000" ->
pickOver1000
example$name[pickOver1000]
# 也可以在設factor時直接設好ordered
factor(
c("0-1000", "1001-2000", "2000+", "1001-2000"),
levels = c("0-1000", "1001-2000", "2000+"),
ordered = T    # 設定為可排序的factor
)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female)
View(list_victimAges_female$年齡層)
# 選出「30_39歲以上受害者」的數目
print(example[c("name", "bloodType")])
# example裡誰血型B型
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
# 取出偶數
pick_even <- (sequenceNums %% 2) == 0    # 確保()內先執行
sequenceNums[pick_even]
x <- c(1,5,8)
y <- c(5,8)
x %in% y    # x裡的每個元素值是不是屬於y集合
# example裡誰來自大台北
example[c("name", "residence")]
pick_fromTaipeiMetro <- example$residence %in% c("Taipei", "New Taipei")
example$name[pick_fromTaipeiMetro]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 創造可選出來自法商學院的True or False向量
levels(factor(transcript100to103$學院))    # 看資料有哪幾種學院
unique(transcript100to103$學院)    # 看資料有哪幾種學院
pick_lawBusiness <- transcript100to103$學院 %in% c("法學院", "商學院")
!(example$residence %in% c("Taipei", "New Taipei"))
View(exchangeRate_after1998)
View(exchangeRate)
View(transcript100to103)
View(example)
# 在 TorF向量 前加上 ! 會成為否定句的 TorF向量
pick_notFromTaipeiMetro <- !pick_fromTaipeiMetro
pick_notFromTaipeiMetro <- !(example$residence %in% c("Taipei", "New Taipei"))
# 各學屆二年級人數
table(transcript100to103$學屆)    # 分類數次數
example$birthday
class(example$birthday)
typeof(example$birthday)
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
print(example[c("name", "allowance")])
example$allowance <-
ordered(
example$allowance
)
class(example$allowance)
example$allowance >= "1001-2000" ->
pickOver1000
example$name[pickOver1000]
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name", "bloodType")])
# example裡誰血型B型
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
# 取出偶數
pick_even <- (sequenceNums %% 2) == 0    # 確保()內先執行
sequenceNums[pick_even]
x <- c(1,5,8)
y <- c(5,8)
x %in% y    # x裡的每個元素值是不是屬於y集合
# example裡誰來自大台北
example[c("name", "residence")]
pick_fromTaipeiMetro <- example$residence %in% c("Taipei", "New Taipei")
example$name[pick_fromTaipeiMetro]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 創造可選出來自法商學院的True or False向量
levels(factor(transcript100to103$學院))    # 看資料有哪幾種學院
unique(transcript100to103$學院)    # 看資料有哪幾種學院
pick_lawBusiness <- transcript100to103$學院 %in% c("法學院", "商學院")
# 在 TorF向量 前加上 ! 會成為否定句的 TorF向量
pick_notFromTaipeiMetro <- !pick_fromTaipeiMetro
pick_notFromTaipeiMetro <- !(example$residence %in% c("Taipei", "New Taipei"))
pick_notFromTaipeiMetro
example[pick_notFromTaipeiMetro]
example$name[pick_notFromTaipeiMetro]
# 在 TorF向量 前加上 ! 會成為否定句的 TorF向量
pick_notFromTaipeiMetro <- !pick_fromTaipeiMetro
pick_notFromTaipeiMetro <- !(example$residence %in% c("Taipei", "New Taipei"))
pick_notFromTaipeiMetro
example$name[pick_notFromTaipeiMetro]
# 在 TorF向量 前加上 ! 會成為否定句的 TorF向量
pick_notFromTaipeiMetro <- !pick_fromTaipeiMetro
pick_notFromTaipeiMetro <- !(example$residence %in% c("Taipei", "New Taipei"))
pick_notFromTaipeiMetro
example$name[pick_fromTaipeiMetro]
example$name[pick_notFromTaipeiMetro]
