factor(
covid19$縣市,
levels = name_newLevel,
ordered = T
)
factor(
covid19$縣市,
levels = name_newLevel,
ordered = T
) ->
covid19$縣市
factor(
covid19$縣市,
levels = name_newLevel,
ordered = T
) ->
covid19$縣市
covid19$縣市 <- factor(
covid19$縣市,
levels = name_newLevel,
ordered = T
)
levels(covid19$縣市)
clc
View(covid19)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
levels(
as.factor(covid19$年齡層)
) ->
age_level
age_level[c(7, 10, 1:6, 8, 9, 11, 12, 13:15)] ->
age_level_r
covid19$年齡層_order1 <- factor(
covid19$年齡層,
levels = age_level_r,
ordered = T
)
levels(covid19$年齡層_order1)
View(covid19)
levels(factor(covid19$年齡層))
# 可排序類別資料：年齡層
levels(
as.factor(covid19$年齡層)
) ->
age_level
age_level[c(7, 10, 1:6, 8, 9, 11, 12, 13:15)] ->
age_level_r
covid19$年齡層_order1 <- factor(
covid19$年齡層,
levels = age_level_r,
ordered = T
)
levels(covid19$年齡層_order1)
levels(factor(covid19$年齡層))
levels(factor(covid19$年齡層))
library(readr)
library(lubridate)
library(stringr)
library(glue)
str_extract(
levels(factor(covid19$年齡層)),
pattern = "^[:digit:]+"
)
str_extract(
levels(factor(covid19$年齡層)),
pattern = "^[:digit:]{2}"
)
str_extract(
levels(factor(covid19$年齡層)),
pattern = "^[:digit:]{1,2}"
)
str_extract(
levels(factor(covid19$年齡層)),
pattern = "^[:digit:]+"
)
levels(factor(covid19$年齡層))
levels(factor(covid19$年齡層)) ->
vector_name
str_extract(
vector_name,
pattern = "^[:digit:]+"
)
str_extract(
vector_name,
pattern = "^[:digit:]+"
) ->
vector_value
as.integer(vector_value)
as.integer(vector_value) ->
vector_value
names(vector_value)
names(vector_value) <- vector_name
names(vector_value)    # 觀察元素名稱
names(vector_value) <- vector_name
sort(
vector_value
)
sort(
vector_value
) ->
vector_value
covid19$年齡層_order2 <-
factor(
covid19$年齡層,
levels = names(vector_value),
ordered = T
)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
# 依「人口多寡」排序縣市
print(population)
class(population)    # 有取名稱的integer vector
names(population)
levels(covid19$縣市)    # 為字串vector
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
levels(
as.factor(covid19$年齡層)
) ->
age_level
age_level[c(7, 10, 1:6, 8, 9, 11, 12, 13:15)] ->
age_level_r
covid19$年齡層_order1 <- factor(
covid19$年齡層,
levels = age_level_r,
ordered = T
)
levels(covid19$年齡層_order1)
levels(factor(covid19$年齡層))
levels(factor(covid19$年齡層)) ->
vector_name
str_extract(
vector_name,
pattern = "^[:digit:]+"
) ->
vector_value
as.integer(vector_value) ->
vector_value
# 創造named vector
names(vector_value)    # 觀察元素名稱
names(vector_value) <- vector_name    # 為元素取名
# 創造named vector
names(vector_value)    # 觀察元素名稱
# sort()排序
sort(
vector_value
) ->
vector_value
covid19$年齡層_order2 <-
factor(
covid19$年齡層,
levels = names(vector_value),
ordered = T
)
levels(covid19$年齡層_order1)
levels(covid19$年齡層_order2)
# 年齡排序
levels(factor(covid19$年齡層)) ->
vector_name
str_extract(
vector_name,
pattern = "^[:digit:]+"
) ->
vector_value
as.integer(vector_value) ->
vector_value
# 創造named vector
names(vector_value)    # 觀察元素名稱
names(vector_value) <- vector_name    # 為元素取名
# sort()排序
sort(
vector_value
) ->
vector_value
covid19$年齡層_order2 <-
factor(
covid19$年齡層,
levels = names(vector_value),
ordered = T
)
levels(covid19$年齡層_order1)
levels(covid19$年齡層_order2)
View(covid19)
library(knitr)
opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)
# windows檔名不要有"-"號
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
factor1
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")    # 改level名
factor1
levels(factor1)
levels(factor1)[[1]] <- "Excellent"
factor1
levels(factor1)[c(3, 4)] <- c("C", "D")
factor1
factor_city <-
factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
factor_city
levels(factor_city) #<- c("", "", "", "", "", "")
levels(factor_city) <- c("中部", "北部", "中部", "北部", "北部", "中部")
factor_city
factor_city <-
factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor_city
# 改成只有北、中兩類
levels(factor_city) <- c("中部", "北部", "中部", "北部", "北部", "中部")
factor_city    # 只剩兩個level
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
# 改成10歲一區間
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
covid19$縣市
covid19$縣市 <- factor(covid19$縣市)
covid19
covid19$縣市
View(covid19)
levels(covid19$縣市)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
View(covid19)
covid19$地區 <- factor(covid19$縣市)
View(covid19)
levels(covid19$地區)
# 建立regex
north_regex <-
"宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹[市縣]"
middle_regex <-
"苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義[市縣]|[台臺]南縣|[台臺]南市|高雄市|屏東縣|澎湖縣"
east_regex <-
"花蓮縣|台東縣"
# 用str_replace()代換
levels(covid19$地區)
library(readr)
library(lubridate)
library(stringr)
library(glue)
# 用str_replace()代換
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = north_regex,
replacement = "北部"
)
levels(covid19$地區)
covid19$地區
# 建立regex
north_regex <-
"宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹[市縣]"
middle_regex <-
"苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義[市縣]|[台臺]南縣|[台臺]南市|高雄市|屏東縣|澎湖縣"
east_regex <-
"花蓮縣|台東縣"
# 用str_replace()代換
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = north_regex,
replacement = "北部"
)
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = middle_regex,
replacement = "中部"
)
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = south_regex,
replacement = "南部"
)
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = east_regex,
replacement = "東部"
)
levels(covid19$地區)
# 建立regex
north_regex <-
"宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹[市縣]"
middle_regex <-
"苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義[市縣]|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <-
"花蓮縣|台東縣"
# 用str_replace()代換
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = north_regex,
replacement = "北部"
)
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = middle_regex,
replacement = "中部"
)
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = south_regex,
replacement = "南部"
)
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = east_regex,
replacement = "東部"
)
levels(covid19$地區)
View(covid19)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 由 covid19$縣市 建立一個地區變數，值為北部、中部、南部、東部。
covid19$地區 <- factor(covid19$縣市)
levels(covid19$地區)
# 建立regex
north_regex <-
"宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹[市縣]"
middle_regex <-
"苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義[市縣]|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <-
"花蓮縣|台東縣"
# 用str_replace()代換
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = north_regex,
replacement = "北部"
)
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = middle_regex,
replacement = "中部"
)
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = south_regex,
replacement = "南部"
)
levels(covid19$地區) <-
str_replace(
string = levels(covid19$地區),
pattern = east_regex,
replacement = "東部"
)
levels(covid19$地區)
View(covid19)
levels(covid19$年齡層)
covid19$`年齡層1` <-
factor(covid19$年齡層)
View(covid19)
levels(covid19$年齡層1)
levels(covid19$`年齡層1`)
levels(covid19$`年齡層1`) -> value1
str_extract(
value1, "^[0-9]+"
)
# 將 covid19$年齡層 由5歲間距改成10歲間距，使改完後的levels為4 < 5-14 < ... < 55-64 < 65+
covid19$`年齡層1` <-
factor(covid19$年齡層)
levels(covid19$`年齡層1`) -> name1
str_extract(
name1, "^[0-9]+"
) ->
value1
as.integer(value1)
names(value1)
names(value1) <- name1
names(value1)
value1
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 將 covid19$年齡層 由5歲間距改成10歲間距，使改完後的levels為4 < 5-14 < ... < 55-64 < 65+
covid19$`年齡層1` <-
factor(covid19$年齡層)
levels(covid19$`年齡層1`) -> name1
str_extract(
name1, "^[0-9]+"
) ->
value1
as.integer(value1) -> value1
names(value1) <- name1
value1
sort(value1)
sort(value1) -> value1
covid19$`年齡層1` <-
factor(
covid19$`年齡層1`,
levels = names(value1),
ordered = T
)
View(covid19)
levels(covid19$年齡層1)
# 新level
start_age <- seq(5, 55, by = 10)
end_age <- seq(14, 64, by = 10)
paste0(start_age, "-", end_age)
levels(covid19$"年齡層1")
paste0(start_age, "-", end_age, )
# 新level
start_age <- seq(5, 55, by = 10)
end_age <- seq(14, 64, by = 10)
paste0(start_age, "-", end_age, )
paste0(start_age, "-", end_age)
rep(
paste0(start_age, "-", end_age),
each = 2
)
rep(
paste0(start_age, "-", end_age),
each = 2    # 每個元素重複兩次
) ->
ageLevel_new
levels(covid19$"年齡層1")
rep(
paste0(start_age, "-", end_age),
each = 2    # 每個元素重複兩次
) ->
ageLevel_1
ageLevel_new <- c("4", ageLevel_1, "65+", "65+")
ageLevel_new
levels(covid19$"年齡層1")
levels(covid19$"年齡層1") <- ageLevel_new
covid19$年齡層1
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2    # 元素6變NA
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
levels(factor2)[[4]] <- "尚可"
levels(factor2)
factor2
# 無法用c(...)把兩個factor vector串接在一起
# non factor
char1 <- c("小明", "小美")
char2 <- c("大雄", "技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
# 無法用c(...)把兩個factor vector串接在一起
# non factor
char1 <- c("小明", "小美")
char2 <- c("大雄", "技安")
c(char1, char2)
# factor
factor11 <- factor(c("好", "壞", "壞"))
factor22 <- factor(c("壞", "好", "好"))
c(factor1, factor2)    # factor被當成integer後才串接在一起
# 無法用c(...)把兩個factor vector串接在一起
# non factor
char1 <- c("小明", "小美")
char2 <- c("大雄", "技安")
c(char1, char2)
# factor
factor11 <- factor(c("好", "壞", "壞"))
factor22 <- factor(c("壞", "好", "好"))
c(factor11, factor22)    # factor被當成integer後才串接在一起
# 正確接法
factor11[4:6] <- factor22
factor11
forcats::fct_c(factor1, factor2)
forcats::fct_c(factor11, factor22)
