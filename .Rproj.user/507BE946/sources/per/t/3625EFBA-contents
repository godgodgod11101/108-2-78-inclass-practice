---
title: "Untitled"
author: "jacky wang"
date: "2020/6/17"
output: html_document
---

```{r setup, include=FALSE}

library(knitr)

opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)

# windows檔名不要有"-"號

```

```{r package, include=FALSE}

library(readr)
library(lubridate)
library(stringr)
library(glue)
library(purrr)
library(magrittr)

```





# Function

## 需求函數

```{r}

# 創造一個物件叫demand的函數

demand <- 
  function(p){ 
    q_d <- 10-5*p
  }

demand

```

```{r}

demand(p = 1.2)    # 沒有output？

```

```{r}

# demand函數內並沒有要求output出現

demand_return <- 
  function(p){
    q_d <- 10-5*p
    return(q_d)
  }

demand_return(1.2)    # output出現，但Global Environment並不會有q_d

# 最近一步的運算值會暫時記在.Last.value

```

```{r}

demand(1.2) -> Qd
# 等於
4 -> Qd

rm(Qd)

```

```{r}

# {...}裡所創造的物件都只是「暫時的」且「不放在global environment」，
# 所以global environment裡就算有同名物件，也不會因函數運作而被不小心更動。

q_d <- 8

demand_return(1.2)
print(q_d)

```

### practice

```{r}

# 請寫下供給函數 q_s = 0 + 2p

```

## 今日天氣

```{r}
# 住三峽的小雯問：“Silly，今天天氣如何？”

jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours

locationInput <- "新北市"    # 輸入"地區"

(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> 
  pick_location    # 創造取出"地區"氣象資料的vector

weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> 
  locationWeather


(locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
(locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector

locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT

glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")


```

```{r}

# 建立氣象預報機器人

askSillyWeather <- function(locationInput){
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> 
  pick_location    # 創造取出"地區"氣象資料的vector

  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> 
    locationWeather


  (locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
  (locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector

  locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
  locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT

  glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}

```

```{r}

askSillyWeather(locationInput = "臺北市")

# askSillyWeather(locationInput = "[臺台]北市")    # regex沒用
# weather_next36hours$cwbopendata$dataset$location$locationName %>%
#   str_detect(pattern = "[台臺]北市")

```

## 函數的組成

```{r}

class(demand_return)    # 函數的class
formals(demand_return)    # 函數input要求
body(demand_return)    # 函數主體

```

```{r}

# 函數可以存在list裡

learning_topics <- 
  list(
    subject = "函數",
    date = lubridate::ymd("2020-06-03"),
    functionsCreated = list(
      demand = demand_return 
    )
  )

# 其實幾乎所有的物件不管什麼class都可以存在list裡！

```

```{r}

learning_topics$functionsCreated$demand(1.2)

```

## Environment

```{r}

typeof(demand_return)

# function本身的運作並不能只靠它的定義值function(...){...}，
#   還要有適當的環境（environment）條件才能生存。
# 若物件的生存運作需要有適當的環境，表示電腦要存這個物件時，還需要包含它的生存環境一起存。
#   這種儲存型態叫closure（閉包）。

environment(demand_return)    # 查詢函數執行所要求環境

codetools::findGlobals(demand_return)    # 查詢函數需要哪些定義好的物件

```

```{r}

intercept <- 10
slope <- -5

myDemand <- function(p){
  q_d <- intercept + slope*p
  return(q_d)
}

```

```{r}

environment(demand_return)
environment(myDemand)

```

```{r}

codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)

```

```{r}

rm(intercept, slope)

myDemand(1.2)


intercept <- 10
slope <- -5

myDemand(1.2)    # 10-5p


slope <- -1

myDemand(1.2)    # 10-p

# global environment裡的intercept、slope值若有改變，它的運作結果也會不同。
#   這種「要運作才去呼叫值」的特性叫lazy evaluation（惰性求值）。

```

## 預設值

```{r}

# 函數lazy evaluation的特性，讓函數的運作：
#   1. 具有隨時可改變運作狀態的彈性；但
#   2. 該工具若落在電腦知識不足的使用者手上，
#        會有誤動global environment而產生運作錯誤的危機。

# 解決方法：設預設值

myDemand2 <- function(p, intercept=10, slope=-5){
  q_d <- intercept + slope*p
  return(q_d)
}

environment(myDemand2)
codetools::findGlobals(myDemand2)

```

```{r}

myDemand2(1.2)
myDemand2(1.2, slope = -1)
myDemand2(1.2, intercept = 5, slope = -1.2)

# 預設值是「平常不需要動到的彈性arguments」，習慣上定義時最好放在arguments的最後面。

```

# Homework












