---
title: "Untitled"
author: "jacky wang"
date: "2020/6/18"
output: html_document
---

```{r setup, include=FALSE}

library(knitr)

opts_chunk$set(echo = TRUE, message = F, warning = T, eval=T)

# windows檔名不要有"-"號

```

```{r package, include=FALSE}

library(readr)    # 資料讀入
library(lubridate)    # 時間
library(stringr)    # 字串
library(glue)    # 字串拼接
library(purrr)    # map()：重複套用函數
library(magrittr)    # pipe
library(codetools)    # findGlobals()：查詢函數需要哪些定義好的物件

# detach("package:stringr")    # 「收回」套件

```





# Conditional Execution

## if

if(條件){
  Body for 條件為真
}

```{r}

readline(prompt = "請輸入你的學號") -> studentId

if(
  str_detect(studentId, "^[437](9[0-9]|1[01][0-9])[0-9]{5}$", negate=T)
){
  warning("wrong student ID7")
}    # 不合理的學號，才要warning

```

```{r}

require(lubridate) -> jack
rm(jack)


# 確認使用者有安裝需要套件（通常寫在函數裡）

if(!require(lubridate)){
  install.packages("lubridate")
}

```

### practice1

```{r}

twDate <-  c("民國108年12月5日", "民國98年10月5日")

# 民國年月日存成date class

"(?<=民國)[:digit:]+(?=年)" -> pattern_year

str_extract(
  twDate, pattern_year
) %>% 
  as.integer(.) %>% 
  {. + 1911} %>% 
  as.character(.)-> 
  yearReplacement

twDate %>% 
  str_replace(
    ., pattern_year, replacement = yearReplacement
  ) %>% 
  ymd(.)

```

```{r}

# 將“民國轉西元”寫成函數

convert_TaiwanDate2WesternDate <- function(twDate){
  "(?<=民國)[:digit:]+(?=年)" -> pattern_year

  str_extract(
    twDate, pattern_year
  ) %>% 
    as.integer(.) %>% 
    {. + 1911} %>% 
    as.character(.)-> 
    yearReplacement

  twDate %>% 
    str_replace(
      ., pattern_year, replacement = yearReplacement
    ) %>% 
    ymd(.) -> 
    wesDate
  
  return(wesDate)
}

convert_TaiwanDate2WesternDate(
  twDate = c("民國107年7月5日", "民國107年7月6日", "民國107年7月7日")
)

```

```{r}

# 上面函數需要stringr及lubridate

convert_TaiwanDate2WesternDate <- function(twDate){
  
  if(!require(lubridate)){
    install.packages("lubridate")
  }
  if(!require(stringr)){
    install.packages("stringr")
  }
  
  library(lubridate)
  library(stringr)
  
  "(?<=民國)[:digit:]+(?=年)" -> pattern_year

  str_extract(
    twDate, pattern_year
  ) %>% 
    as.integer(.) %>% 
    {. + 1911} %>% 
    as.character(.)-> 
    yearReplacement

  twDate %>% 
    str_replace(
      ., pattern_year, replacement = yearReplacement
    ) %>% 
    ymd(.) -> 
    wesDate
  
  return(wesDate)
}

```

### practice2

```{r}

# 寫一個check_package(pkgName)函數，它會檢查使用者是否有安裝套件，如果沒有就安裝

check_package <- function(pkgName){
  
  if(require(pkgName, character.only = T)){
    return(T)
  }
  
  if(!require(pkgName, character.only = T)){
    return(F)
  }
}

check_package("stringr")

```

```{r}

# package: clipr：把剛複製的東西叫進來（read_clip()）

library(clipr)

read_clip() -> myText
myText

```

```{r}

# check_package()一次只能偵測一個套件是否有安裝。
#   寫一個check_packages(pkgNames)，pkgNames的class為character，length任意。



# 將 “民國轉西元” 函數body內有關套件檢查的部份，改成你設計的
#   check_package()／check_packages()。

```


### practice3

```{r}

# 先前的askSilly_weather函數，如果使用者
#   1. 沒有安裝jsonlite
#   2. 縣市裡的「臺」使用簡體「台」
#   都會產生錯誤訊息。
# 請修改函數，讓使用者不管有沒有安裝jsonlite或使用簡體「台」都沒問題。

askSillyWeather <- function(locationInput){
  
  if(!require(jsonlite)){
    install.packages("jsonlite")
  }
  
  if(str_detect(locationInput, "^台")){
    str_replace(
      locationInput, "^台", "臺"
    ) -> 
      locationInput
  }
  
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> 
  pick_location    # 創造取出"地區"氣象資料的vector

  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> 
    locationWeather


  (locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
  (locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector

  locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
  locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT

  glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}

```

```{r}

askSillyWeather("台北市")

```

### 不重覆下載

```{r}

system.time(
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
)    # 檢視步驟耗時

```

```{r}

rm(weather_next36hours)
exists("weather_next36hours")    # 資料存在嗎？

if(!exists("weather_next36hours")){
    jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
    weather_next36hours
}    # 如果 weather_next36hours 不存在，請幫我下載

# 上述 if... 若放在function裡，執行完function時，並不會把 weather_next36hours 
#   存在global environment中，如此導致每次執行function時，又要重新下載一次資料，
#   顯得 if... 沒有意義。

```

```{r}

# fast function

askSillyWeatherFast <- function(locationInput){
  
  if(!require(jsonlite)){
    install.packages("jsonlite")
  }
  if(!require(glue)){
    install.packages("glue")
  }
  if(!require(SOAR)){
    install.packages("SOAR")
  }
  
  if(str_detect(locationInput, "^台")){
    str_replace(
      locationInput, "^台", "臺"
    ) -> 
      locationInput
  }
  
  if(!exists("weather_next36hours")){
    
    jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
    weather_next36hours
    
    SOAR::Store(weather_next36hours) # 將存在.R_cache environment中
  }
  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> 
  pick_location    # 創造取出"地區"氣象資料的vector

  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> 
    locationWeather


  (locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
  (locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector

  locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
  locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT

  glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}

```

```{r}

# slow function

askSillyWeatherSlow <- function(locationInput){
  
  if(!require(jsonlite)){
    install.packages("jsonlite")
  }
  if(!require(glue)){
    install.packages("glue")
  }
  if(!require(SOAR)){
    install.packages("SOAR")
  }
  
  if(str_detect(locationInput, "^台")){
    str_replace(
      locationInput, "^台", "臺"
    ) -> 
      locationInput
  }
  
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
    weather_next36hours
  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> 
  pick_location    # 創造取出"地區"氣象資料的vector

  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> 
    locationWeather


  (locationWeather$elementName == "MaxT") -> pick_maxT    # 創造取出"最高溫"的vector
  (locationWeather$elementName == "MinT") -> pick_minT    # 創造取出"最低溫"的vector

  locationWeather$time[pick_maxT][[1]]$parameter$parameterName[[1]] -> maxT
  locationWeather$time[pick_minT][[1]]$parameter$parameterName[[1]] -> minT

  glue::glue("{locationInput} {today()} 氣溫預報，最高{maxT}度，最低{minT}度。")
}

```

```{r}

system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))

system.time(askSillyWeatherSlow("台北市"))
system.time(askSillyWeatherFast("台北市"))    # 有資料時，elapse time = 0

detach(name = ".R_Cache")    # 清除cache

```

#### 清除library函數

```{r}



clear_otherPackage <- function(){
  
  if(!require(magrittr)){
    install.packages("magrittr")
  }
  
  library(magrittr)
  
  sessionInfo()$otherPkgs %>% 
    names() -> 
    jack
  
  lapply(paste0("package:", jack), FUN = detach, character.only = T)
}

# name space：命名空間

```






